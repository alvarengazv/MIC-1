// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2024 17:40:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DATA_PATH
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DATA_PATH_vlg_sample_tst(
	CLOCK,
	LOAD,
	MBR_IN,
	MDR_IN,
	MIR,
	sampler_tx
);
input  CLOCK;
input  LOAD;
input [7:0] MBR_IN;
input [31:0] MDR_IN;
input [35:0] MIR;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or LOAD or MBR_IN or MDR_IN or MIR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DATA_PATH_vlg_check_tst (
	A,
	B,
	C,
	MAR,
	MBR_OUT,
	MDR_OUT,
	N,
	PC,
	Z,
	sampler_rx
);
input [31:0] A;
input [31:0] B;
input [31:0] C;
input [31:0] MAR;
input [7:0] MBR_OUT;
input [31:0] MDR_OUT;
input  N;
input [31:0] PC;
input  Z;
input sampler_rx;

reg [31:0] A_expected;
reg [31:0] B_expected;
reg [31:0] C_expected;
reg [31:0] MAR_expected;
reg [7:0] MBR_OUT_expected;
reg [31:0] MDR_OUT_expected;
reg  N_expected;
reg [31:0] PC_expected;
reg  Z_expected;

reg [31:0] A_prev;
reg [31:0] B_prev;
reg [31:0] C_prev;
reg [31:0] MAR_prev;
reg [7:0] MBR_OUT_prev;
reg [31:0] MDR_OUT_prev;
reg  N_prev;
reg [31:0] PC_prev;
reg  Z_prev;

reg [31:0] A_expected_prev;
reg [31:0] B_expected_prev;
reg [31:0] C_expected_prev;
reg [31:0] MAR_expected_prev;
reg [7:0] MBR_OUT_expected_prev;
reg [31:0] MDR_OUT_expected_prev;
reg  N_expected_prev;
reg [31:0] PC_expected_prev;
reg  Z_expected_prev;

reg [31:0] last_A_exp;
reg [31:0] last_B_exp;
reg [31:0] last_C_exp;
reg [31:0] last_MAR_exp;
reg [7:0] last_MBR_OUT_exp;
reg [31:0] last_MDR_OUT_exp;
reg  last_N_exp;
reg [31:0] last_PC_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	MAR_prev = MAR;
	MBR_OUT_prev = MBR_OUT;
	MDR_OUT_prev = MDR_OUT;
	N_prev = N;
	PC_prev = PC;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	MAR_expected_prev = MAR_expected;
	MBR_OUT_expected_prev = MBR_OUT_expected;
	MDR_OUT_expected_prev = MDR_OUT_expected;
	N_expected_prev = N_expected;
	PC_expected_prev = PC_expected;
	Z_expected_prev = Z_expected;
end


// expected MAR[ 31 ]
initial
begin
	MAR_expected[31] = 1'bX;
end 
// expected MAR[ 30 ]
initial
begin
	MAR_expected[30] = 1'bX;
end 
// expected MAR[ 29 ]
initial
begin
	MAR_expected[29] = 1'bX;
end 
// expected MAR[ 28 ]
initial
begin
	MAR_expected[28] = 1'bX;
end 
// expected MAR[ 27 ]
initial
begin
	MAR_expected[27] = 1'bX;
end 
// expected MAR[ 26 ]
initial
begin
	MAR_expected[26] = 1'bX;
end 
// expected MAR[ 25 ]
initial
begin
	MAR_expected[25] = 1'bX;
end 
// expected MAR[ 24 ]
initial
begin
	MAR_expected[24] = 1'bX;
end 
// expected MAR[ 23 ]
initial
begin
	MAR_expected[23] = 1'bX;
end 
// expected MAR[ 22 ]
initial
begin
	MAR_expected[22] = 1'bX;
end 
// expected MAR[ 21 ]
initial
begin
	MAR_expected[21] = 1'bX;
end 
// expected MAR[ 20 ]
initial
begin
	MAR_expected[20] = 1'bX;
end 
// expected MAR[ 19 ]
initial
begin
	MAR_expected[19] = 1'bX;
end 
// expected MAR[ 18 ]
initial
begin
	MAR_expected[18] = 1'bX;
end 
// expected MAR[ 17 ]
initial
begin
	MAR_expected[17] = 1'bX;
end 
// expected MAR[ 16 ]
initial
begin
	MAR_expected[16] = 1'bX;
end 
// expected MAR[ 15 ]
initial
begin
	MAR_expected[15] = 1'bX;
end 
// expected MAR[ 14 ]
initial
begin
	MAR_expected[14] = 1'bX;
end 
// expected MAR[ 13 ]
initial
begin
	MAR_expected[13] = 1'bX;
end 
// expected MAR[ 12 ]
initial
begin
	MAR_expected[12] = 1'bX;
end 
// expected MAR[ 11 ]
initial
begin
	MAR_expected[11] = 1'bX;
end 
// expected MAR[ 10 ]
initial
begin
	MAR_expected[10] = 1'bX;
end 
// expected MAR[ 9 ]
initial
begin
	MAR_expected[9] = 1'bX;
end 
// expected MAR[ 8 ]
initial
begin
	MAR_expected[8] = 1'bX;
end 
// expected MAR[ 7 ]
initial
begin
	MAR_expected[7] = 1'bX;
end 
// expected MAR[ 6 ]
initial
begin
	MAR_expected[6] = 1'bX;
end 
// expected MAR[ 5 ]
initial
begin
	MAR_expected[5] = 1'bX;
end 
// expected MAR[ 4 ]
initial
begin
	MAR_expected[4] = 1'bX;
end 
// expected MAR[ 3 ]
initial
begin
	MAR_expected[3] = 1'bX;
end 
// expected MAR[ 2 ]
initial
begin
	MAR_expected[2] = 1'bX;
end 
// expected MAR[ 1 ]
initial
begin
	MAR_expected[1] = 1'bX;
end 
// expected MAR[ 0 ]
initial
begin
	MAR_expected[0] = 1'bX;
end 
// expected MDR_OUT[ 31 ]
initial
begin
	MDR_OUT_expected[31] = 1'bX;
end 
// expected MDR_OUT[ 30 ]
initial
begin
	MDR_OUT_expected[30] = 1'bX;
end 
// expected MDR_OUT[ 29 ]
initial
begin
	MDR_OUT_expected[29] = 1'bX;
end 
// expected MDR_OUT[ 28 ]
initial
begin
	MDR_OUT_expected[28] = 1'bX;
end 
// expected MDR_OUT[ 27 ]
initial
begin
	MDR_OUT_expected[27] = 1'bX;
end 
// expected MDR_OUT[ 26 ]
initial
begin
	MDR_OUT_expected[26] = 1'bX;
end 
// expected MDR_OUT[ 25 ]
initial
begin
	MDR_OUT_expected[25] = 1'bX;
end 
// expected MDR_OUT[ 24 ]
initial
begin
	MDR_OUT_expected[24] = 1'bX;
end 
// expected MDR_OUT[ 23 ]
initial
begin
	MDR_OUT_expected[23] = 1'bX;
end 
// expected MDR_OUT[ 22 ]
initial
begin
	MDR_OUT_expected[22] = 1'bX;
end 
// expected MDR_OUT[ 21 ]
initial
begin
	MDR_OUT_expected[21] = 1'bX;
end 
// expected MDR_OUT[ 20 ]
initial
begin
	MDR_OUT_expected[20] = 1'bX;
end 
// expected MDR_OUT[ 19 ]
initial
begin
	MDR_OUT_expected[19] = 1'bX;
end 
// expected MDR_OUT[ 18 ]
initial
begin
	MDR_OUT_expected[18] = 1'bX;
end 
// expected MDR_OUT[ 17 ]
initial
begin
	MDR_OUT_expected[17] = 1'bX;
end 
// expected MDR_OUT[ 16 ]
initial
begin
	MDR_OUT_expected[16] = 1'bX;
end 
// expected MDR_OUT[ 15 ]
initial
begin
	MDR_OUT_expected[15] = 1'bX;
end 
// expected MDR_OUT[ 14 ]
initial
begin
	MDR_OUT_expected[14] = 1'bX;
end 
// expected MDR_OUT[ 13 ]
initial
begin
	MDR_OUT_expected[13] = 1'bX;
end 
// expected MDR_OUT[ 12 ]
initial
begin
	MDR_OUT_expected[12] = 1'bX;
end 
// expected MDR_OUT[ 11 ]
initial
begin
	MDR_OUT_expected[11] = 1'bX;
end 
// expected MDR_OUT[ 10 ]
initial
begin
	MDR_OUT_expected[10] = 1'bX;
end 
// expected MDR_OUT[ 9 ]
initial
begin
	MDR_OUT_expected[9] = 1'bX;
end 
// expected MDR_OUT[ 8 ]
initial
begin
	MDR_OUT_expected[8] = 1'bX;
end 
// expected MDR_OUT[ 7 ]
initial
begin
	MDR_OUT_expected[7] = 1'bX;
end 
// expected MDR_OUT[ 6 ]
initial
begin
	MDR_OUT_expected[6] = 1'bX;
end 
// expected MDR_OUT[ 5 ]
initial
begin
	MDR_OUT_expected[5] = 1'bX;
end 
// expected MDR_OUT[ 4 ]
initial
begin
	MDR_OUT_expected[4] = 1'bX;
end 
// expected MDR_OUT[ 3 ]
initial
begin
	MDR_OUT_expected[3] = 1'bX;
end 
// expected MDR_OUT[ 2 ]
initial
begin
	MDR_OUT_expected[2] = 1'bX;
end 
// expected MDR_OUT[ 1 ]
initial
begin
	MDR_OUT_expected[1] = 1'bX;
end 
// expected MDR_OUT[ 0 ]
initial
begin
	MDR_OUT_expected[0] = 1'bX;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected MBR_OUT[ 7 ]
initial
begin
	MBR_OUT_expected[7] = 1'bX;
end 
// expected MBR_OUT[ 6 ]
initial
begin
	MBR_OUT_expected[6] = 1'bX;
end 
// expected MBR_OUT[ 5 ]
initial
begin
	MBR_OUT_expected[5] = 1'bX;
end 
// expected MBR_OUT[ 4 ]
initial
begin
	MBR_OUT_expected[4] = 1'bX;
end 
// expected MBR_OUT[ 3 ]
initial
begin
	MBR_OUT_expected[3] = 1'bX;
end 
// expected MBR_OUT[ 2 ]
initial
begin
	MBR_OUT_expected[2] = 1'bX;
end 
// expected MBR_OUT[ 1 ]
initial
begin
	MBR_OUT_expected[1] = 1'bX;
end 
// expected MBR_OUT[ 0 ]
initial
begin
	MBR_OUT_expected[0] = 1'bX;
end 
// expected A[ 31 ]
initial
begin
	A_expected[31] = 1'bX;
end 
// expected A[ 30 ]
initial
begin
	A_expected[30] = 1'bX;
end 
// expected A[ 29 ]
initial
begin
	A_expected[29] = 1'bX;
end 
// expected A[ 28 ]
initial
begin
	A_expected[28] = 1'bX;
end 
// expected A[ 27 ]
initial
begin
	A_expected[27] = 1'bX;
end 
// expected A[ 26 ]
initial
begin
	A_expected[26] = 1'bX;
end 
// expected A[ 25 ]
initial
begin
	A_expected[25] = 1'bX;
end 
// expected A[ 24 ]
initial
begin
	A_expected[24] = 1'bX;
end 
// expected A[ 23 ]
initial
begin
	A_expected[23] = 1'bX;
end 
// expected A[ 22 ]
initial
begin
	A_expected[22] = 1'bX;
end 
// expected A[ 21 ]
initial
begin
	A_expected[21] = 1'bX;
end 
// expected A[ 20 ]
initial
begin
	A_expected[20] = 1'bX;
end 
// expected A[ 19 ]
initial
begin
	A_expected[19] = 1'bX;
end 
// expected A[ 18 ]
initial
begin
	A_expected[18] = 1'bX;
end 
// expected A[ 17 ]
initial
begin
	A_expected[17] = 1'bX;
end 
// expected A[ 16 ]
initial
begin
	A_expected[16] = 1'bX;
end 
// expected A[ 15 ]
initial
begin
	A_expected[15] = 1'bX;
end 
// expected A[ 14 ]
initial
begin
	A_expected[14] = 1'bX;
end 
// expected A[ 13 ]
initial
begin
	A_expected[13] = 1'bX;
end 
// expected A[ 12 ]
initial
begin
	A_expected[12] = 1'bX;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'bX;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'bX;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'bX;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 31 ]
initial
begin
	B_expected[31] = 1'bX;
end 
// expected B[ 30 ]
initial
begin
	B_expected[30] = 1'bX;
end 
// expected B[ 29 ]
initial
begin
	B_expected[29] = 1'bX;
end 
// expected B[ 28 ]
initial
begin
	B_expected[28] = 1'bX;
end 
// expected B[ 27 ]
initial
begin
	B_expected[27] = 1'bX;
end 
// expected B[ 26 ]
initial
begin
	B_expected[26] = 1'bX;
end 
// expected B[ 25 ]
initial
begin
	B_expected[25] = 1'bX;
end 
// expected B[ 24 ]
initial
begin
	B_expected[24] = 1'bX;
end 
// expected B[ 23 ]
initial
begin
	B_expected[23] = 1'bX;
end 
// expected B[ 22 ]
initial
begin
	B_expected[22] = 1'bX;
end 
// expected B[ 21 ]
initial
begin
	B_expected[21] = 1'bX;
end 
// expected B[ 20 ]
initial
begin
	B_expected[20] = 1'bX;
end 
// expected B[ 19 ]
initial
begin
	B_expected[19] = 1'bX;
end 
// expected B[ 18 ]
initial
begin
	B_expected[18] = 1'bX;
end 
// expected B[ 17 ]
initial
begin
	B_expected[17] = 1'bX;
end 
// expected B[ 16 ]
initial
begin
	B_expected[16] = 1'bX;
end 
// expected B[ 15 ]
initial
begin
	B_expected[15] = 1'bX;
end 
// expected B[ 14 ]
initial
begin
	B_expected[14] = 1'bX;
end 
// expected B[ 13 ]
initial
begin
	B_expected[13] = 1'bX;
end 
// expected B[ 12 ]
initial
begin
	B_expected[12] = 1'bX;
end 
// expected B[ 11 ]
initial
begin
	B_expected[11] = 1'bX;
end 
// expected B[ 10 ]
initial
begin
	B_expected[10] = 1'bX;
end 
// expected B[ 9 ]
initial
begin
	B_expected[9] = 1'bX;
end 
// expected B[ 8 ]
initial
begin
	B_expected[8] = 1'bX;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected C[ 31 ]
initial
begin
	C_expected[31] = 1'bX;
end 
// expected C[ 30 ]
initial
begin
	C_expected[30] = 1'bX;
end 
// expected C[ 29 ]
initial
begin
	C_expected[29] = 1'bX;
end 
// expected C[ 28 ]
initial
begin
	C_expected[28] = 1'bX;
end 
// expected C[ 27 ]
initial
begin
	C_expected[27] = 1'bX;
end 
// expected C[ 26 ]
initial
begin
	C_expected[26] = 1'bX;
end 
// expected C[ 25 ]
initial
begin
	C_expected[25] = 1'bX;
end 
// expected C[ 24 ]
initial
begin
	C_expected[24] = 1'bX;
end 
// expected C[ 23 ]
initial
begin
	C_expected[23] = 1'bX;
end 
// expected C[ 22 ]
initial
begin
	C_expected[22] = 1'bX;
end 
// expected C[ 21 ]
initial
begin
	C_expected[21] = 1'bX;
end 
// expected C[ 20 ]
initial
begin
	C_expected[20] = 1'bX;
end 
// expected C[ 19 ]
initial
begin
	C_expected[19] = 1'bX;
end 
// expected C[ 18 ]
initial
begin
	C_expected[18] = 1'bX;
end 
// expected C[ 17 ]
initial
begin
	C_expected[17] = 1'bX;
end 
// expected C[ 16 ]
initial
begin
	C_expected[16] = 1'bX;
end 
// expected C[ 15 ]
initial
begin
	C_expected[15] = 1'bX;
end 
// expected C[ 14 ]
initial
begin
	C_expected[14] = 1'bX;
end 
// expected C[ 13 ]
initial
begin
	C_expected[13] = 1'bX;
end 
// expected C[ 12 ]
initial
begin
	C_expected[12] = 1'bX;
end 
// expected C[ 11 ]
initial
begin
	C_expected[11] = 1'bX;
end 
// expected C[ 10 ]
initial
begin
	C_expected[10] = 1'bX;
end 
// expected C[ 9 ]
initial
begin
	C_expected[9] = 1'bX;
end 
// expected C[ 8 ]
initial
begin
	C_expected[8] = 1'bX;
end 
// expected C[ 7 ]
initial
begin
	C_expected[7] = 1'bX;
end 
// expected C[ 6 ]
initial
begin
	C_expected[6] = 1'bX;
end 
// expected C[ 5 ]
initial
begin
	C_expected[5] = 1'bX;
end 
// expected C[ 4 ]
initial
begin
	C_expected[4] = 1'bX;
end 
// expected C[ 3 ]
initial
begin
	C_expected[3] = 1'bX;
end 
// expected C[ 2 ]
initial
begin
	C_expected[2] = 1'bX;
end 
// expected C[ 1 ]
initial
begin
	C_expected[1] = 1'bX;
end 
// expected C[ 0 ]
initial
begin
	C_expected[0] = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or MAR_expected or MAR or MBR_OUT_expected or MBR_OUT or MDR_OUT_expected or MDR_OUT or N_expected or N or PC_expected or PC or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected MAR = %b | expected MBR_OUT = %b | expected MDR_OUT = %b | expected N = %b | expected PC = %b | expected Z = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,MAR_expected_prev,MBR_OUT_expected_prev,MDR_OUT_expected_prev,N_expected_prev,PC_expected_prev,Z_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real MAR = %b | real MBR_OUT = %b | real MDR_OUT = %b | real N = %b | real PC = %b | real Z = %b | ",A_prev,B_prev,C_prev,MAR_prev,MBR_OUT_prev,MDR_OUT_prev,N_prev,PC_prev,Z_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( A_expected_prev[12] !== 1'bx ) && ( A_prev[12] !== A_expected_prev[12] )
		&& ((A_expected_prev[12] !== last_A_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[12] = A_expected_prev[12];
	end
	if (
		( A_expected_prev[13] !== 1'bx ) && ( A_prev[13] !== A_expected_prev[13] )
		&& ((A_expected_prev[13] !== last_A_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[13] = A_expected_prev[13];
	end
	if (
		( A_expected_prev[14] !== 1'bx ) && ( A_prev[14] !== A_expected_prev[14] )
		&& ((A_expected_prev[14] !== last_A_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[14] = A_expected_prev[14];
	end
	if (
		( A_expected_prev[15] !== 1'bx ) && ( A_prev[15] !== A_expected_prev[15] )
		&& ((A_expected_prev[15] !== last_A_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[15] = A_expected_prev[15];
	end
	if (
		( A_expected_prev[16] !== 1'bx ) && ( A_prev[16] !== A_expected_prev[16] )
		&& ((A_expected_prev[16] !== last_A_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[16] = A_expected_prev[16];
	end
	if (
		( A_expected_prev[17] !== 1'bx ) && ( A_prev[17] !== A_expected_prev[17] )
		&& ((A_expected_prev[17] !== last_A_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[17] = A_expected_prev[17];
	end
	if (
		( A_expected_prev[18] !== 1'bx ) && ( A_prev[18] !== A_expected_prev[18] )
		&& ((A_expected_prev[18] !== last_A_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[18] = A_expected_prev[18];
	end
	if (
		( A_expected_prev[19] !== 1'bx ) && ( A_prev[19] !== A_expected_prev[19] )
		&& ((A_expected_prev[19] !== last_A_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[19] = A_expected_prev[19];
	end
	if (
		( A_expected_prev[20] !== 1'bx ) && ( A_prev[20] !== A_expected_prev[20] )
		&& ((A_expected_prev[20] !== last_A_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[20] = A_expected_prev[20];
	end
	if (
		( A_expected_prev[21] !== 1'bx ) && ( A_prev[21] !== A_expected_prev[21] )
		&& ((A_expected_prev[21] !== last_A_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[21] = A_expected_prev[21];
	end
	if (
		( A_expected_prev[22] !== 1'bx ) && ( A_prev[22] !== A_expected_prev[22] )
		&& ((A_expected_prev[22] !== last_A_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[22] = A_expected_prev[22];
	end
	if (
		( A_expected_prev[23] !== 1'bx ) && ( A_prev[23] !== A_expected_prev[23] )
		&& ((A_expected_prev[23] !== last_A_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[23] = A_expected_prev[23];
	end
	if (
		( A_expected_prev[24] !== 1'bx ) && ( A_prev[24] !== A_expected_prev[24] )
		&& ((A_expected_prev[24] !== last_A_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[24] = A_expected_prev[24];
	end
	if (
		( A_expected_prev[25] !== 1'bx ) && ( A_prev[25] !== A_expected_prev[25] )
		&& ((A_expected_prev[25] !== last_A_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[25] = A_expected_prev[25];
	end
	if (
		( A_expected_prev[26] !== 1'bx ) && ( A_prev[26] !== A_expected_prev[26] )
		&& ((A_expected_prev[26] !== last_A_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[26] = A_expected_prev[26];
	end
	if (
		( A_expected_prev[27] !== 1'bx ) && ( A_prev[27] !== A_expected_prev[27] )
		&& ((A_expected_prev[27] !== last_A_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[27] = A_expected_prev[27];
	end
	if (
		( A_expected_prev[28] !== 1'bx ) && ( A_prev[28] !== A_expected_prev[28] )
		&& ((A_expected_prev[28] !== last_A_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[28] = A_expected_prev[28];
	end
	if (
		( A_expected_prev[29] !== 1'bx ) && ( A_prev[29] !== A_expected_prev[29] )
		&& ((A_expected_prev[29] !== last_A_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[29] = A_expected_prev[29];
	end
	if (
		( A_expected_prev[30] !== 1'bx ) && ( A_prev[30] !== A_expected_prev[30] )
		&& ((A_expected_prev[30] !== last_A_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[30] = A_expected_prev[30];
	end
	if (
		( A_expected_prev[31] !== 1'bx ) && ( A_prev[31] !== A_expected_prev[31] )
		&& ((A_expected_prev[31] !== last_A_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[31] = A_expected_prev[31];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( B_expected_prev[8] !== 1'bx ) && ( B_prev[8] !== B_expected_prev[8] )
		&& ((B_expected_prev[8] !== last_B_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[8] = B_expected_prev[8];
	end
	if (
		( B_expected_prev[9] !== 1'bx ) && ( B_prev[9] !== B_expected_prev[9] )
		&& ((B_expected_prev[9] !== last_B_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[9] = B_expected_prev[9];
	end
	if (
		( B_expected_prev[10] !== 1'bx ) && ( B_prev[10] !== B_expected_prev[10] )
		&& ((B_expected_prev[10] !== last_B_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[10] = B_expected_prev[10];
	end
	if (
		( B_expected_prev[11] !== 1'bx ) && ( B_prev[11] !== B_expected_prev[11] )
		&& ((B_expected_prev[11] !== last_B_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[11] = B_expected_prev[11];
	end
	if (
		( B_expected_prev[12] !== 1'bx ) && ( B_prev[12] !== B_expected_prev[12] )
		&& ((B_expected_prev[12] !== last_B_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[12] = B_expected_prev[12];
	end
	if (
		( B_expected_prev[13] !== 1'bx ) && ( B_prev[13] !== B_expected_prev[13] )
		&& ((B_expected_prev[13] !== last_B_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[13] = B_expected_prev[13];
	end
	if (
		( B_expected_prev[14] !== 1'bx ) && ( B_prev[14] !== B_expected_prev[14] )
		&& ((B_expected_prev[14] !== last_B_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[14] = B_expected_prev[14];
	end
	if (
		( B_expected_prev[15] !== 1'bx ) && ( B_prev[15] !== B_expected_prev[15] )
		&& ((B_expected_prev[15] !== last_B_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[15] = B_expected_prev[15];
	end
	if (
		( B_expected_prev[16] !== 1'bx ) && ( B_prev[16] !== B_expected_prev[16] )
		&& ((B_expected_prev[16] !== last_B_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[16] = B_expected_prev[16];
	end
	if (
		( B_expected_prev[17] !== 1'bx ) && ( B_prev[17] !== B_expected_prev[17] )
		&& ((B_expected_prev[17] !== last_B_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[17] = B_expected_prev[17];
	end
	if (
		( B_expected_prev[18] !== 1'bx ) && ( B_prev[18] !== B_expected_prev[18] )
		&& ((B_expected_prev[18] !== last_B_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[18] = B_expected_prev[18];
	end
	if (
		( B_expected_prev[19] !== 1'bx ) && ( B_prev[19] !== B_expected_prev[19] )
		&& ((B_expected_prev[19] !== last_B_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[19] = B_expected_prev[19];
	end
	if (
		( B_expected_prev[20] !== 1'bx ) && ( B_prev[20] !== B_expected_prev[20] )
		&& ((B_expected_prev[20] !== last_B_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[20] = B_expected_prev[20];
	end
	if (
		( B_expected_prev[21] !== 1'bx ) && ( B_prev[21] !== B_expected_prev[21] )
		&& ((B_expected_prev[21] !== last_B_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[21] = B_expected_prev[21];
	end
	if (
		( B_expected_prev[22] !== 1'bx ) && ( B_prev[22] !== B_expected_prev[22] )
		&& ((B_expected_prev[22] !== last_B_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[22] = B_expected_prev[22];
	end
	if (
		( B_expected_prev[23] !== 1'bx ) && ( B_prev[23] !== B_expected_prev[23] )
		&& ((B_expected_prev[23] !== last_B_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[23] = B_expected_prev[23];
	end
	if (
		( B_expected_prev[24] !== 1'bx ) && ( B_prev[24] !== B_expected_prev[24] )
		&& ((B_expected_prev[24] !== last_B_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[24] = B_expected_prev[24];
	end
	if (
		( B_expected_prev[25] !== 1'bx ) && ( B_prev[25] !== B_expected_prev[25] )
		&& ((B_expected_prev[25] !== last_B_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[25] = B_expected_prev[25];
	end
	if (
		( B_expected_prev[26] !== 1'bx ) && ( B_prev[26] !== B_expected_prev[26] )
		&& ((B_expected_prev[26] !== last_B_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[26] = B_expected_prev[26];
	end
	if (
		( B_expected_prev[27] !== 1'bx ) && ( B_prev[27] !== B_expected_prev[27] )
		&& ((B_expected_prev[27] !== last_B_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[27] = B_expected_prev[27];
	end
	if (
		( B_expected_prev[28] !== 1'bx ) && ( B_prev[28] !== B_expected_prev[28] )
		&& ((B_expected_prev[28] !== last_B_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[28] = B_expected_prev[28];
	end
	if (
		( B_expected_prev[29] !== 1'bx ) && ( B_prev[29] !== B_expected_prev[29] )
		&& ((B_expected_prev[29] !== last_B_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[29] = B_expected_prev[29];
	end
	if (
		( B_expected_prev[30] !== 1'bx ) && ( B_prev[30] !== B_expected_prev[30] )
		&& ((B_expected_prev[30] !== last_B_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[30] = B_expected_prev[30];
	end
	if (
		( B_expected_prev[31] !== 1'bx ) && ( B_prev[31] !== B_expected_prev[31] )
		&& ((B_expected_prev[31] !== last_B_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[31] = B_expected_prev[31];
	end
	if (
		( C_expected_prev[0] !== 1'bx ) && ( C_prev[0] !== C_expected_prev[0] )
		&& ((C_expected_prev[0] !== last_C_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[0] = C_expected_prev[0];
	end
	if (
		( C_expected_prev[1] !== 1'bx ) && ( C_prev[1] !== C_expected_prev[1] )
		&& ((C_expected_prev[1] !== last_C_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[1] = C_expected_prev[1];
	end
	if (
		( C_expected_prev[2] !== 1'bx ) && ( C_prev[2] !== C_expected_prev[2] )
		&& ((C_expected_prev[2] !== last_C_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[2] = C_expected_prev[2];
	end
	if (
		( C_expected_prev[3] !== 1'bx ) && ( C_prev[3] !== C_expected_prev[3] )
		&& ((C_expected_prev[3] !== last_C_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[3] = C_expected_prev[3];
	end
	if (
		( C_expected_prev[4] !== 1'bx ) && ( C_prev[4] !== C_expected_prev[4] )
		&& ((C_expected_prev[4] !== last_C_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[4] = C_expected_prev[4];
	end
	if (
		( C_expected_prev[5] !== 1'bx ) && ( C_prev[5] !== C_expected_prev[5] )
		&& ((C_expected_prev[5] !== last_C_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[5] = C_expected_prev[5];
	end
	if (
		( C_expected_prev[6] !== 1'bx ) && ( C_prev[6] !== C_expected_prev[6] )
		&& ((C_expected_prev[6] !== last_C_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[6] = C_expected_prev[6];
	end
	if (
		( C_expected_prev[7] !== 1'bx ) && ( C_prev[7] !== C_expected_prev[7] )
		&& ((C_expected_prev[7] !== last_C_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[7] = C_expected_prev[7];
	end
	if (
		( C_expected_prev[8] !== 1'bx ) && ( C_prev[8] !== C_expected_prev[8] )
		&& ((C_expected_prev[8] !== last_C_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[8] = C_expected_prev[8];
	end
	if (
		( C_expected_prev[9] !== 1'bx ) && ( C_prev[9] !== C_expected_prev[9] )
		&& ((C_expected_prev[9] !== last_C_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[9] = C_expected_prev[9];
	end
	if (
		( C_expected_prev[10] !== 1'bx ) && ( C_prev[10] !== C_expected_prev[10] )
		&& ((C_expected_prev[10] !== last_C_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[10] = C_expected_prev[10];
	end
	if (
		( C_expected_prev[11] !== 1'bx ) && ( C_prev[11] !== C_expected_prev[11] )
		&& ((C_expected_prev[11] !== last_C_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[11] = C_expected_prev[11];
	end
	if (
		( C_expected_prev[12] !== 1'bx ) && ( C_prev[12] !== C_expected_prev[12] )
		&& ((C_expected_prev[12] !== last_C_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[12] = C_expected_prev[12];
	end
	if (
		( C_expected_prev[13] !== 1'bx ) && ( C_prev[13] !== C_expected_prev[13] )
		&& ((C_expected_prev[13] !== last_C_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[13] = C_expected_prev[13];
	end
	if (
		( C_expected_prev[14] !== 1'bx ) && ( C_prev[14] !== C_expected_prev[14] )
		&& ((C_expected_prev[14] !== last_C_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[14] = C_expected_prev[14];
	end
	if (
		( C_expected_prev[15] !== 1'bx ) && ( C_prev[15] !== C_expected_prev[15] )
		&& ((C_expected_prev[15] !== last_C_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[15] = C_expected_prev[15];
	end
	if (
		( C_expected_prev[16] !== 1'bx ) && ( C_prev[16] !== C_expected_prev[16] )
		&& ((C_expected_prev[16] !== last_C_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[16] = C_expected_prev[16];
	end
	if (
		( C_expected_prev[17] !== 1'bx ) && ( C_prev[17] !== C_expected_prev[17] )
		&& ((C_expected_prev[17] !== last_C_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[17] = C_expected_prev[17];
	end
	if (
		( C_expected_prev[18] !== 1'bx ) && ( C_prev[18] !== C_expected_prev[18] )
		&& ((C_expected_prev[18] !== last_C_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[18] = C_expected_prev[18];
	end
	if (
		( C_expected_prev[19] !== 1'bx ) && ( C_prev[19] !== C_expected_prev[19] )
		&& ((C_expected_prev[19] !== last_C_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[19] = C_expected_prev[19];
	end
	if (
		( C_expected_prev[20] !== 1'bx ) && ( C_prev[20] !== C_expected_prev[20] )
		&& ((C_expected_prev[20] !== last_C_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[20] = C_expected_prev[20];
	end
	if (
		( C_expected_prev[21] !== 1'bx ) && ( C_prev[21] !== C_expected_prev[21] )
		&& ((C_expected_prev[21] !== last_C_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[21] = C_expected_prev[21];
	end
	if (
		( C_expected_prev[22] !== 1'bx ) && ( C_prev[22] !== C_expected_prev[22] )
		&& ((C_expected_prev[22] !== last_C_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[22] = C_expected_prev[22];
	end
	if (
		( C_expected_prev[23] !== 1'bx ) && ( C_prev[23] !== C_expected_prev[23] )
		&& ((C_expected_prev[23] !== last_C_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[23] = C_expected_prev[23];
	end
	if (
		( C_expected_prev[24] !== 1'bx ) && ( C_prev[24] !== C_expected_prev[24] )
		&& ((C_expected_prev[24] !== last_C_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[24] = C_expected_prev[24];
	end
	if (
		( C_expected_prev[25] !== 1'bx ) && ( C_prev[25] !== C_expected_prev[25] )
		&& ((C_expected_prev[25] !== last_C_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[25] = C_expected_prev[25];
	end
	if (
		( C_expected_prev[26] !== 1'bx ) && ( C_prev[26] !== C_expected_prev[26] )
		&& ((C_expected_prev[26] !== last_C_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[26] = C_expected_prev[26];
	end
	if (
		( C_expected_prev[27] !== 1'bx ) && ( C_prev[27] !== C_expected_prev[27] )
		&& ((C_expected_prev[27] !== last_C_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[27] = C_expected_prev[27];
	end
	if (
		( C_expected_prev[28] !== 1'bx ) && ( C_prev[28] !== C_expected_prev[28] )
		&& ((C_expected_prev[28] !== last_C_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[28] = C_expected_prev[28];
	end
	if (
		( C_expected_prev[29] !== 1'bx ) && ( C_prev[29] !== C_expected_prev[29] )
		&& ((C_expected_prev[29] !== last_C_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[29] = C_expected_prev[29];
	end
	if (
		( C_expected_prev[30] !== 1'bx ) && ( C_prev[30] !== C_expected_prev[30] )
		&& ((C_expected_prev[30] !== last_C_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[30] = C_expected_prev[30];
	end
	if (
		( C_expected_prev[31] !== 1'bx ) && ( C_prev[31] !== C_expected_prev[31] )
		&& ((C_expected_prev[31] !== last_C_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[31] = C_expected_prev[31];
	end
	if (
		( MAR_expected_prev[0] !== 1'bx ) && ( MAR_prev[0] !== MAR_expected_prev[0] )
		&& ((MAR_expected_prev[0] !== last_MAR_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[0] = MAR_expected_prev[0];
	end
	if (
		( MAR_expected_prev[1] !== 1'bx ) && ( MAR_prev[1] !== MAR_expected_prev[1] )
		&& ((MAR_expected_prev[1] !== last_MAR_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[1] = MAR_expected_prev[1];
	end
	if (
		( MAR_expected_prev[2] !== 1'bx ) && ( MAR_prev[2] !== MAR_expected_prev[2] )
		&& ((MAR_expected_prev[2] !== last_MAR_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[2] = MAR_expected_prev[2];
	end
	if (
		( MAR_expected_prev[3] !== 1'bx ) && ( MAR_prev[3] !== MAR_expected_prev[3] )
		&& ((MAR_expected_prev[3] !== last_MAR_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[3] = MAR_expected_prev[3];
	end
	if (
		( MAR_expected_prev[4] !== 1'bx ) && ( MAR_prev[4] !== MAR_expected_prev[4] )
		&& ((MAR_expected_prev[4] !== last_MAR_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[4] = MAR_expected_prev[4];
	end
	if (
		( MAR_expected_prev[5] !== 1'bx ) && ( MAR_prev[5] !== MAR_expected_prev[5] )
		&& ((MAR_expected_prev[5] !== last_MAR_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[5] = MAR_expected_prev[5];
	end
	if (
		( MAR_expected_prev[6] !== 1'bx ) && ( MAR_prev[6] !== MAR_expected_prev[6] )
		&& ((MAR_expected_prev[6] !== last_MAR_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[6] = MAR_expected_prev[6];
	end
	if (
		( MAR_expected_prev[7] !== 1'bx ) && ( MAR_prev[7] !== MAR_expected_prev[7] )
		&& ((MAR_expected_prev[7] !== last_MAR_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[7] = MAR_expected_prev[7];
	end
	if (
		( MAR_expected_prev[8] !== 1'bx ) && ( MAR_prev[8] !== MAR_expected_prev[8] )
		&& ((MAR_expected_prev[8] !== last_MAR_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[8] = MAR_expected_prev[8];
	end
	if (
		( MAR_expected_prev[9] !== 1'bx ) && ( MAR_prev[9] !== MAR_expected_prev[9] )
		&& ((MAR_expected_prev[9] !== last_MAR_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[9] = MAR_expected_prev[9];
	end
	if (
		( MAR_expected_prev[10] !== 1'bx ) && ( MAR_prev[10] !== MAR_expected_prev[10] )
		&& ((MAR_expected_prev[10] !== last_MAR_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[10] = MAR_expected_prev[10];
	end
	if (
		( MAR_expected_prev[11] !== 1'bx ) && ( MAR_prev[11] !== MAR_expected_prev[11] )
		&& ((MAR_expected_prev[11] !== last_MAR_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[11] = MAR_expected_prev[11];
	end
	if (
		( MAR_expected_prev[12] !== 1'bx ) && ( MAR_prev[12] !== MAR_expected_prev[12] )
		&& ((MAR_expected_prev[12] !== last_MAR_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[12] = MAR_expected_prev[12];
	end
	if (
		( MAR_expected_prev[13] !== 1'bx ) && ( MAR_prev[13] !== MAR_expected_prev[13] )
		&& ((MAR_expected_prev[13] !== last_MAR_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[13] = MAR_expected_prev[13];
	end
	if (
		( MAR_expected_prev[14] !== 1'bx ) && ( MAR_prev[14] !== MAR_expected_prev[14] )
		&& ((MAR_expected_prev[14] !== last_MAR_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[14] = MAR_expected_prev[14];
	end
	if (
		( MAR_expected_prev[15] !== 1'bx ) && ( MAR_prev[15] !== MAR_expected_prev[15] )
		&& ((MAR_expected_prev[15] !== last_MAR_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[15] = MAR_expected_prev[15];
	end
	if (
		( MAR_expected_prev[16] !== 1'bx ) && ( MAR_prev[16] !== MAR_expected_prev[16] )
		&& ((MAR_expected_prev[16] !== last_MAR_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[16] = MAR_expected_prev[16];
	end
	if (
		( MAR_expected_prev[17] !== 1'bx ) && ( MAR_prev[17] !== MAR_expected_prev[17] )
		&& ((MAR_expected_prev[17] !== last_MAR_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[17] = MAR_expected_prev[17];
	end
	if (
		( MAR_expected_prev[18] !== 1'bx ) && ( MAR_prev[18] !== MAR_expected_prev[18] )
		&& ((MAR_expected_prev[18] !== last_MAR_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[18] = MAR_expected_prev[18];
	end
	if (
		( MAR_expected_prev[19] !== 1'bx ) && ( MAR_prev[19] !== MAR_expected_prev[19] )
		&& ((MAR_expected_prev[19] !== last_MAR_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[19] = MAR_expected_prev[19];
	end
	if (
		( MAR_expected_prev[20] !== 1'bx ) && ( MAR_prev[20] !== MAR_expected_prev[20] )
		&& ((MAR_expected_prev[20] !== last_MAR_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[20] = MAR_expected_prev[20];
	end
	if (
		( MAR_expected_prev[21] !== 1'bx ) && ( MAR_prev[21] !== MAR_expected_prev[21] )
		&& ((MAR_expected_prev[21] !== last_MAR_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[21] = MAR_expected_prev[21];
	end
	if (
		( MAR_expected_prev[22] !== 1'bx ) && ( MAR_prev[22] !== MAR_expected_prev[22] )
		&& ((MAR_expected_prev[22] !== last_MAR_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[22] = MAR_expected_prev[22];
	end
	if (
		( MAR_expected_prev[23] !== 1'bx ) && ( MAR_prev[23] !== MAR_expected_prev[23] )
		&& ((MAR_expected_prev[23] !== last_MAR_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[23] = MAR_expected_prev[23];
	end
	if (
		( MAR_expected_prev[24] !== 1'bx ) && ( MAR_prev[24] !== MAR_expected_prev[24] )
		&& ((MAR_expected_prev[24] !== last_MAR_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[24] = MAR_expected_prev[24];
	end
	if (
		( MAR_expected_prev[25] !== 1'bx ) && ( MAR_prev[25] !== MAR_expected_prev[25] )
		&& ((MAR_expected_prev[25] !== last_MAR_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[25] = MAR_expected_prev[25];
	end
	if (
		( MAR_expected_prev[26] !== 1'bx ) && ( MAR_prev[26] !== MAR_expected_prev[26] )
		&& ((MAR_expected_prev[26] !== last_MAR_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[26] = MAR_expected_prev[26];
	end
	if (
		( MAR_expected_prev[27] !== 1'bx ) && ( MAR_prev[27] !== MAR_expected_prev[27] )
		&& ((MAR_expected_prev[27] !== last_MAR_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[27] = MAR_expected_prev[27];
	end
	if (
		( MAR_expected_prev[28] !== 1'bx ) && ( MAR_prev[28] !== MAR_expected_prev[28] )
		&& ((MAR_expected_prev[28] !== last_MAR_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[28] = MAR_expected_prev[28];
	end
	if (
		( MAR_expected_prev[29] !== 1'bx ) && ( MAR_prev[29] !== MAR_expected_prev[29] )
		&& ((MAR_expected_prev[29] !== last_MAR_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[29] = MAR_expected_prev[29];
	end
	if (
		( MAR_expected_prev[30] !== 1'bx ) && ( MAR_prev[30] !== MAR_expected_prev[30] )
		&& ((MAR_expected_prev[30] !== last_MAR_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[30] = MAR_expected_prev[30];
	end
	if (
		( MAR_expected_prev[31] !== 1'bx ) && ( MAR_prev[31] !== MAR_expected_prev[31] )
		&& ((MAR_expected_prev[31] !== last_MAR_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MAR_exp[31] = MAR_expected_prev[31];
	end
	if (
		( MBR_OUT_expected_prev[0] !== 1'bx ) && ( MBR_OUT_prev[0] !== MBR_OUT_expected_prev[0] )
		&& ((MBR_OUT_expected_prev[0] !== last_MBR_OUT_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[0] = MBR_OUT_expected_prev[0];
	end
	if (
		( MBR_OUT_expected_prev[1] !== 1'bx ) && ( MBR_OUT_prev[1] !== MBR_OUT_expected_prev[1] )
		&& ((MBR_OUT_expected_prev[1] !== last_MBR_OUT_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[1] = MBR_OUT_expected_prev[1];
	end
	if (
		( MBR_OUT_expected_prev[2] !== 1'bx ) && ( MBR_OUT_prev[2] !== MBR_OUT_expected_prev[2] )
		&& ((MBR_OUT_expected_prev[2] !== last_MBR_OUT_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[2] = MBR_OUT_expected_prev[2];
	end
	if (
		( MBR_OUT_expected_prev[3] !== 1'bx ) && ( MBR_OUT_prev[3] !== MBR_OUT_expected_prev[3] )
		&& ((MBR_OUT_expected_prev[3] !== last_MBR_OUT_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[3] = MBR_OUT_expected_prev[3];
	end
	if (
		( MBR_OUT_expected_prev[4] !== 1'bx ) && ( MBR_OUT_prev[4] !== MBR_OUT_expected_prev[4] )
		&& ((MBR_OUT_expected_prev[4] !== last_MBR_OUT_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[4] = MBR_OUT_expected_prev[4];
	end
	if (
		( MBR_OUT_expected_prev[5] !== 1'bx ) && ( MBR_OUT_prev[5] !== MBR_OUT_expected_prev[5] )
		&& ((MBR_OUT_expected_prev[5] !== last_MBR_OUT_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[5] = MBR_OUT_expected_prev[5];
	end
	if (
		( MBR_OUT_expected_prev[6] !== 1'bx ) && ( MBR_OUT_prev[6] !== MBR_OUT_expected_prev[6] )
		&& ((MBR_OUT_expected_prev[6] !== last_MBR_OUT_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[6] = MBR_OUT_expected_prev[6];
	end
	if (
		( MBR_OUT_expected_prev[7] !== 1'bx ) && ( MBR_OUT_prev[7] !== MBR_OUT_expected_prev[7] )
		&& ((MBR_OUT_expected_prev[7] !== last_MBR_OUT_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MBR_OUT_exp[7] = MBR_OUT_expected_prev[7];
	end
	if (
		( MDR_OUT_expected_prev[0] !== 1'bx ) && ( MDR_OUT_prev[0] !== MDR_OUT_expected_prev[0] )
		&& ((MDR_OUT_expected_prev[0] !== last_MDR_OUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[0] = MDR_OUT_expected_prev[0];
	end
	if (
		( MDR_OUT_expected_prev[1] !== 1'bx ) && ( MDR_OUT_prev[1] !== MDR_OUT_expected_prev[1] )
		&& ((MDR_OUT_expected_prev[1] !== last_MDR_OUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[1] = MDR_OUT_expected_prev[1];
	end
	if (
		( MDR_OUT_expected_prev[2] !== 1'bx ) && ( MDR_OUT_prev[2] !== MDR_OUT_expected_prev[2] )
		&& ((MDR_OUT_expected_prev[2] !== last_MDR_OUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[2] = MDR_OUT_expected_prev[2];
	end
	if (
		( MDR_OUT_expected_prev[3] !== 1'bx ) && ( MDR_OUT_prev[3] !== MDR_OUT_expected_prev[3] )
		&& ((MDR_OUT_expected_prev[3] !== last_MDR_OUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[3] = MDR_OUT_expected_prev[3];
	end
	if (
		( MDR_OUT_expected_prev[4] !== 1'bx ) && ( MDR_OUT_prev[4] !== MDR_OUT_expected_prev[4] )
		&& ((MDR_OUT_expected_prev[4] !== last_MDR_OUT_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[4] = MDR_OUT_expected_prev[4];
	end
	if (
		( MDR_OUT_expected_prev[5] !== 1'bx ) && ( MDR_OUT_prev[5] !== MDR_OUT_expected_prev[5] )
		&& ((MDR_OUT_expected_prev[5] !== last_MDR_OUT_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[5] = MDR_OUT_expected_prev[5];
	end
	if (
		( MDR_OUT_expected_prev[6] !== 1'bx ) && ( MDR_OUT_prev[6] !== MDR_OUT_expected_prev[6] )
		&& ((MDR_OUT_expected_prev[6] !== last_MDR_OUT_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[6] = MDR_OUT_expected_prev[6];
	end
	if (
		( MDR_OUT_expected_prev[7] !== 1'bx ) && ( MDR_OUT_prev[7] !== MDR_OUT_expected_prev[7] )
		&& ((MDR_OUT_expected_prev[7] !== last_MDR_OUT_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[7] = MDR_OUT_expected_prev[7];
	end
	if (
		( MDR_OUT_expected_prev[8] !== 1'bx ) && ( MDR_OUT_prev[8] !== MDR_OUT_expected_prev[8] )
		&& ((MDR_OUT_expected_prev[8] !== last_MDR_OUT_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[8] = MDR_OUT_expected_prev[8];
	end
	if (
		( MDR_OUT_expected_prev[9] !== 1'bx ) && ( MDR_OUT_prev[9] !== MDR_OUT_expected_prev[9] )
		&& ((MDR_OUT_expected_prev[9] !== last_MDR_OUT_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[9] = MDR_OUT_expected_prev[9];
	end
	if (
		( MDR_OUT_expected_prev[10] !== 1'bx ) && ( MDR_OUT_prev[10] !== MDR_OUT_expected_prev[10] )
		&& ((MDR_OUT_expected_prev[10] !== last_MDR_OUT_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[10] = MDR_OUT_expected_prev[10];
	end
	if (
		( MDR_OUT_expected_prev[11] !== 1'bx ) && ( MDR_OUT_prev[11] !== MDR_OUT_expected_prev[11] )
		&& ((MDR_OUT_expected_prev[11] !== last_MDR_OUT_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[11] = MDR_OUT_expected_prev[11];
	end
	if (
		( MDR_OUT_expected_prev[12] !== 1'bx ) && ( MDR_OUT_prev[12] !== MDR_OUT_expected_prev[12] )
		&& ((MDR_OUT_expected_prev[12] !== last_MDR_OUT_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[12] = MDR_OUT_expected_prev[12];
	end
	if (
		( MDR_OUT_expected_prev[13] !== 1'bx ) && ( MDR_OUT_prev[13] !== MDR_OUT_expected_prev[13] )
		&& ((MDR_OUT_expected_prev[13] !== last_MDR_OUT_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[13] = MDR_OUT_expected_prev[13];
	end
	if (
		( MDR_OUT_expected_prev[14] !== 1'bx ) && ( MDR_OUT_prev[14] !== MDR_OUT_expected_prev[14] )
		&& ((MDR_OUT_expected_prev[14] !== last_MDR_OUT_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[14] = MDR_OUT_expected_prev[14];
	end
	if (
		( MDR_OUT_expected_prev[15] !== 1'bx ) && ( MDR_OUT_prev[15] !== MDR_OUT_expected_prev[15] )
		&& ((MDR_OUT_expected_prev[15] !== last_MDR_OUT_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[15] = MDR_OUT_expected_prev[15];
	end
	if (
		( MDR_OUT_expected_prev[16] !== 1'bx ) && ( MDR_OUT_prev[16] !== MDR_OUT_expected_prev[16] )
		&& ((MDR_OUT_expected_prev[16] !== last_MDR_OUT_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[16] = MDR_OUT_expected_prev[16];
	end
	if (
		( MDR_OUT_expected_prev[17] !== 1'bx ) && ( MDR_OUT_prev[17] !== MDR_OUT_expected_prev[17] )
		&& ((MDR_OUT_expected_prev[17] !== last_MDR_OUT_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[17] = MDR_OUT_expected_prev[17];
	end
	if (
		( MDR_OUT_expected_prev[18] !== 1'bx ) && ( MDR_OUT_prev[18] !== MDR_OUT_expected_prev[18] )
		&& ((MDR_OUT_expected_prev[18] !== last_MDR_OUT_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[18] = MDR_OUT_expected_prev[18];
	end
	if (
		( MDR_OUT_expected_prev[19] !== 1'bx ) && ( MDR_OUT_prev[19] !== MDR_OUT_expected_prev[19] )
		&& ((MDR_OUT_expected_prev[19] !== last_MDR_OUT_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[19] = MDR_OUT_expected_prev[19];
	end
	if (
		( MDR_OUT_expected_prev[20] !== 1'bx ) && ( MDR_OUT_prev[20] !== MDR_OUT_expected_prev[20] )
		&& ((MDR_OUT_expected_prev[20] !== last_MDR_OUT_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[20] = MDR_OUT_expected_prev[20];
	end
	if (
		( MDR_OUT_expected_prev[21] !== 1'bx ) && ( MDR_OUT_prev[21] !== MDR_OUT_expected_prev[21] )
		&& ((MDR_OUT_expected_prev[21] !== last_MDR_OUT_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[21] = MDR_OUT_expected_prev[21];
	end
	if (
		( MDR_OUT_expected_prev[22] !== 1'bx ) && ( MDR_OUT_prev[22] !== MDR_OUT_expected_prev[22] )
		&& ((MDR_OUT_expected_prev[22] !== last_MDR_OUT_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[22] = MDR_OUT_expected_prev[22];
	end
	if (
		( MDR_OUT_expected_prev[23] !== 1'bx ) && ( MDR_OUT_prev[23] !== MDR_OUT_expected_prev[23] )
		&& ((MDR_OUT_expected_prev[23] !== last_MDR_OUT_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[23] = MDR_OUT_expected_prev[23];
	end
	if (
		( MDR_OUT_expected_prev[24] !== 1'bx ) && ( MDR_OUT_prev[24] !== MDR_OUT_expected_prev[24] )
		&& ((MDR_OUT_expected_prev[24] !== last_MDR_OUT_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[24] = MDR_OUT_expected_prev[24];
	end
	if (
		( MDR_OUT_expected_prev[25] !== 1'bx ) && ( MDR_OUT_prev[25] !== MDR_OUT_expected_prev[25] )
		&& ((MDR_OUT_expected_prev[25] !== last_MDR_OUT_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[25] = MDR_OUT_expected_prev[25];
	end
	if (
		( MDR_OUT_expected_prev[26] !== 1'bx ) && ( MDR_OUT_prev[26] !== MDR_OUT_expected_prev[26] )
		&& ((MDR_OUT_expected_prev[26] !== last_MDR_OUT_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[26] = MDR_OUT_expected_prev[26];
	end
	if (
		( MDR_OUT_expected_prev[27] !== 1'bx ) && ( MDR_OUT_prev[27] !== MDR_OUT_expected_prev[27] )
		&& ((MDR_OUT_expected_prev[27] !== last_MDR_OUT_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[27] = MDR_OUT_expected_prev[27];
	end
	if (
		( MDR_OUT_expected_prev[28] !== 1'bx ) && ( MDR_OUT_prev[28] !== MDR_OUT_expected_prev[28] )
		&& ((MDR_OUT_expected_prev[28] !== last_MDR_OUT_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[28] = MDR_OUT_expected_prev[28];
	end
	if (
		( MDR_OUT_expected_prev[29] !== 1'bx ) && ( MDR_OUT_prev[29] !== MDR_OUT_expected_prev[29] )
		&& ((MDR_OUT_expected_prev[29] !== last_MDR_OUT_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[29] = MDR_OUT_expected_prev[29];
	end
	if (
		( MDR_OUT_expected_prev[30] !== 1'bx ) && ( MDR_OUT_prev[30] !== MDR_OUT_expected_prev[30] )
		&& ((MDR_OUT_expected_prev[30] !== last_MDR_OUT_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[30] = MDR_OUT_expected_prev[30];
	end
	if (
		( MDR_OUT_expected_prev[31] !== 1'bx ) && ( MDR_OUT_prev[31] !== MDR_OUT_expected_prev[31] )
		&& ((MDR_OUT_expected_prev[31] !== last_MDR_OUT_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_OUT_expected_prev);
		$display ("     Real value = %b", MDR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MDR_OUT_exp[31] = MDR_OUT_expected_prev[31];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DATA_PATH_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg LOAD;
reg [7:0] MBR_IN;
reg [31:0] MDR_IN;
reg [35:0] MIR;
// wires                                               
wire [31:0] A;
wire [31:0] B;
wire [31:0] C;
wire [31:0] MAR;
wire [7:0] MBR_OUT;
wire [31:0] MDR_OUT;
wire N;
wire [31:0] PC;
wire Z;

wire sampler;                             

// assign statements (if any)                          
DATA_PATH i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CLOCK(CLOCK),
	.LOAD(LOAD),
	.MAR(MAR),
	.MBR_IN(MBR_IN),
	.MBR_OUT(MBR_OUT),
	.MDR_IN(MDR_IN),
	.MDR_OUT(MDR_OUT),
	.MIR(MIR),
	.N(N),
	.PC(PC),
	.Z(Z)
);
// MIR[ 35 ]
initial
begin
	MIR[35] = 1'b0;
end 
// MIR[ 34 ]
initial
begin
	MIR[34] = 1'b0;
end 
// MIR[ 33 ]
initial
begin
	MIR[33] = 1'b0;
end 
// MIR[ 32 ]
initial
begin
	MIR[32] = 1'b0;
end 
// MIR[ 31 ]
initial
begin
	MIR[31] = 1'b0;
end 
// MIR[ 30 ]
initial
begin
	MIR[30] = 1'b0;
end 
// MIR[ 29 ]
initial
begin
	MIR[29] = 1'b0;
end 
// MIR[ 28 ]
initial
begin
	MIR[28] = 1'b0;
end 
// MIR[ 27 ]
initial
begin
	MIR[27] = 1'b0;
end 
// MIR[ 26 ]
initial
begin
	MIR[26] = 1'b0;
end 
// MIR[ 25 ]
initial
begin
	MIR[25] = 1'b0;
end 
// MIR[ 24 ]
initial
begin
	MIR[24] = 1'b0;
end 
// MIR[ 23 ]
initial
begin
	MIR[23] = 1'b0;
end 
// MIR[ 22 ]
initial
begin
	MIR[22] = 1'b0;
end 
// MIR[ 21 ]
initial
begin
	MIR[21] = 1'b0;
	MIR[21] = #100000 1'b1;
	MIR[21] = #1400000 1'b0;
end 
// MIR[ 20 ]
initial
begin
	MIR[20] = 1'b0;
	MIR[20] = #100000 1'b1;
	MIR[20] = #1400000 1'b0;
end 
// MIR[ 19 ]
initial
begin
	MIR[19] = 1'b0;
	MIR[19] = #1000000 1'b1;
	MIR[19] = #500000 1'b0;
end 
// MIR[ 18 ]
initial
begin
	MIR[18] = 1'b0;
	MIR[18] = #100000 1'b1;
	MIR[18] = #1400000 1'b0;
end 
// MIR[ 17 ]
initial
begin
	MIR[17] = 1'b0;
end 
// MIR[ 16 ]
initial
begin
	MIR[16] = 1'b0;
	MIR[16] = #100000 1'b1;
	MIR[16] = #900000 1'b0;
end 
// MIR[ 15 ]
initial
begin
	MIR[15] = 1'b0;
	MIR[15] = #900000 1'b1;
	MIR[15] = #100000 1'b0;
end 
// MIR[ 14 ]
initial
begin
	MIR[14] = 1'b0;
	MIR[14] = #800000 1'b1;
	MIR[14] = #100000 1'b0;
end 
// MIR[ 13 ]
initial
begin
	MIR[13] = 1'b0;
	MIR[13] = #700000 1'b1;
	MIR[13] = #100000 1'b0;
end 
// MIR[ 12 ]
initial
begin
	MIR[12] = 1'b0;
	MIR[12] = #600000 1'b1;
	MIR[12] = #100000 1'b0;
end 
// MIR[ 11 ]
initial
begin
	MIR[11] = 1'b0;
	MIR[11] = #500000 1'b1;
	MIR[11] = #100000 1'b0;
end 
// MIR[ 10 ]
initial
begin
	MIR[10] = 1'b0;
	MIR[10] = #400000 1'b1;
	MIR[10] = #100000 1'b0;
end 
// MIR[ 9 ]
initial
begin
	MIR[9] = 1'b0;
	MIR[9] = #100000 1'b1;
	MIR[9] = #900000 1'b0;
end 
// MIR[ 8 ]
initial
begin
	MIR[8] = 1'b0;
	MIR[8] = #300000 1'b1;
	MIR[8] = #100000 1'b0;
	MIR[8] = #600000 1'b1;
	MIR[8] = #500000 1'b0;
end 
// MIR[ 7 ]
initial
begin
	MIR[7] = 1'b0;
	MIR[7] = #200000 1'b1;
	MIR[7] = #100000 1'b0;
end 
// MIR[ 6 ]
initial
begin
	MIR[6] = 1'b0;
end 
// MIR[ 5 ]
initial
begin
	MIR[5] = 1'b0;
end 
// MIR[ 4 ]
initial
begin
	MIR[4] = 1'b0;
end 
// MIR[ 3 ]
initial
begin
	MIR[3] = 1'b0;
	MIR[3] = #1400000 1'b1;
	MIR[3] = #100000 1'b0;
end 
// MIR[ 2 ]
initial
begin
	MIR[2] = 1'b0;
	MIR[2] = #1000000 1'b1;
	MIR[2] = #400000 1'b0;
end 
// MIR[ 1 ]
initial
begin
	MIR[1] = 1'b0;
	MIR[1] = #1200000 1'b1;
	MIR[1] = #200000 1'b0;
end 
// MIR[ 0 ]
initial
begin
	MIR[0] = 1'b0;
	MIR[0] = #100000 1'b1;
	MIR[0] = #900000 1'b0;
	MIR[0] = #100000 1'b1;
	MIR[0] = #100000 1'b0;
	MIR[0] = #100000 1'b1;
	MIR[0] = #100000 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #80000 1'b1;
	#20000;
end 

// LOAD
initial
begin
	LOAD = 1'b0;
	LOAD = #10000 1'b1;
end 
// MBR_IN[ 7 ]
initial
begin
	MBR_IN[7] = 1'b0;
end 
// MBR_IN[ 6 ]
initial
begin
	MBR_IN[6] = 1'b0;
end 
// MBR_IN[ 5 ]
initial
begin
	MBR_IN[5] = 1'b0;
end 
// MBR_IN[ 4 ]
initial
begin
	MBR_IN[4] = 1'b0;
end 
// MBR_IN[ 3 ]
initial
begin
	MBR_IN[3] = 1'b0;
end 
// MBR_IN[ 2 ]
initial
begin
	MBR_IN[2] = 1'b0;
end 
// MBR_IN[ 1 ]
initial
begin
	MBR_IN[1] = 1'b0;
end 
// MBR_IN[ 0 ]
initial
begin
	MBR_IN[0] = 1'b0;
end 
// MDR_IN[ 31 ]
initial
begin
	MDR_IN[31] = 1'b0;
end 
// MDR_IN[ 30 ]
initial
begin
	MDR_IN[30] = 1'b0;
end 
// MDR_IN[ 29 ]
initial
begin
	MDR_IN[29] = 1'b0;
end 
// MDR_IN[ 28 ]
initial
begin
	MDR_IN[28] = 1'b0;
end 
// MDR_IN[ 27 ]
initial
begin
	MDR_IN[27] = 1'b0;
end 
// MDR_IN[ 26 ]
initial
begin
	MDR_IN[26] = 1'b0;
end 
// MDR_IN[ 25 ]
initial
begin
	MDR_IN[25] = 1'b0;
end 
// MDR_IN[ 24 ]
initial
begin
	MDR_IN[24] = 1'b0;
end 
// MDR_IN[ 23 ]
initial
begin
	MDR_IN[23] = 1'b0;
end 
// MDR_IN[ 22 ]
initial
begin
	MDR_IN[22] = 1'b0;
end 
// MDR_IN[ 21 ]
initial
begin
	MDR_IN[21] = 1'b0;
end 
// MDR_IN[ 20 ]
initial
begin
	MDR_IN[20] = 1'b0;
end 
// MDR_IN[ 19 ]
initial
begin
	MDR_IN[19] = 1'b0;
end 
// MDR_IN[ 18 ]
initial
begin
	MDR_IN[18] = 1'b0;
end 
// MDR_IN[ 17 ]
initial
begin
	MDR_IN[17] = 1'b0;
end 
// MDR_IN[ 16 ]
initial
begin
	MDR_IN[16] = 1'b0;
end 
// MDR_IN[ 15 ]
initial
begin
	MDR_IN[15] = 1'b0;
end 
// MDR_IN[ 14 ]
initial
begin
	MDR_IN[14] = 1'b0;
end 
// MDR_IN[ 13 ]
initial
begin
	MDR_IN[13] = 1'b0;
end 
// MDR_IN[ 12 ]
initial
begin
	MDR_IN[12] = 1'b0;
end 
// MDR_IN[ 11 ]
initial
begin
	MDR_IN[11] = 1'b0;
end 
// MDR_IN[ 10 ]
initial
begin
	MDR_IN[10] = 1'b0;
end 
// MDR_IN[ 9 ]
initial
begin
	MDR_IN[9] = 1'b0;
end 
// MDR_IN[ 8 ]
initial
begin
	MDR_IN[8] = 1'b0;
end 
// MDR_IN[ 7 ]
initial
begin
	MDR_IN[7] = 1'b0;
end 
// MDR_IN[ 6 ]
initial
begin
	MDR_IN[6] = 1'b0;
end 
// MDR_IN[ 5 ]
initial
begin
	MDR_IN[5] = 1'b0;
end 
// MDR_IN[ 4 ]
initial
begin
	MDR_IN[4] = 1'b0;
end 
// MDR_IN[ 3 ]
initial
begin
	MDR_IN[3] = 1'b0;
end 
// MDR_IN[ 2 ]
initial
begin
	MDR_IN[2] = 1'b0;
end 
// MDR_IN[ 1 ]
initial
begin
	MDR_IN[1] = 1'b0;
end 
// MDR_IN[ 0 ]
initial
begin
	MDR_IN[0] = 1'b0;
end 

DATA_PATH_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.LOAD(LOAD),
	.MBR_IN(MBR_IN),
	.MDR_IN(MDR_IN),
	.MIR(MIR),
	.sampler_tx(sampler)
);

DATA_PATH_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.MAR(MAR),
	.MBR_OUT(MBR_OUT),
	.MDR_OUT(MDR_OUT),
	.N(N),
	.PC(PC),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

