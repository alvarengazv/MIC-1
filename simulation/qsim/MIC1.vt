// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/03/2024 15:10:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MAR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MAR_vlg_sample_tst(
	CLOCK,
	IN_C,
	LOAD,
	MIR,
	sampler_tx
);
input  CLOCK;
input [31:0] IN_C;
input  LOAD;
input [35:0] MIR;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or IN_C or LOAD or MIR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MAR_vlg_check_tst (
	DATA_ADDRESS,
	sampler_rx
);
input [31:0] DATA_ADDRESS;
input sampler_rx;

reg [31:0] DATA_ADDRESS_expected;

reg [31:0] DATA_ADDRESS_prev;

reg [31:0] DATA_ADDRESS_expected_prev;

reg [31:0] last_DATA_ADDRESS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_ADDRESS_prev = DATA_ADDRESS;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_ADDRESS_expected_prev = DATA_ADDRESS_expected;
end


// expected DATA_ADDRESS[ 31 ]
initial
begin
	DATA_ADDRESS_expected[31] = 1'bX;
	DATA_ADDRESS_expected[31] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 30 ]
initial
begin
	DATA_ADDRESS_expected[30] = 1'bX;
	DATA_ADDRESS_expected[30] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 29 ]
initial
begin
	DATA_ADDRESS_expected[29] = 1'bX;
	DATA_ADDRESS_expected[29] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 28 ]
initial
begin
	DATA_ADDRESS_expected[28] = 1'bX;
	DATA_ADDRESS_expected[28] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 27 ]
initial
begin
	DATA_ADDRESS_expected[27] = 1'bX;
	DATA_ADDRESS_expected[27] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 26 ]
initial
begin
	DATA_ADDRESS_expected[26] = 1'bX;
	DATA_ADDRESS_expected[26] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 25 ]
initial
begin
	DATA_ADDRESS_expected[25] = 1'bX;
	DATA_ADDRESS_expected[25] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 24 ]
initial
begin
	DATA_ADDRESS_expected[24] = 1'bX;
	DATA_ADDRESS_expected[24] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 23 ]
initial
begin
	DATA_ADDRESS_expected[23] = 1'bX;
	DATA_ADDRESS_expected[23] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 22 ]
initial
begin
	DATA_ADDRESS_expected[22] = 1'bX;
	DATA_ADDRESS_expected[22] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 21 ]
initial
begin
	DATA_ADDRESS_expected[21] = 1'bX;
	DATA_ADDRESS_expected[21] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 20 ]
initial
begin
	DATA_ADDRESS_expected[20] = 1'bX;
	DATA_ADDRESS_expected[20] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 19 ]
initial
begin
	DATA_ADDRESS_expected[19] = 1'bX;
	DATA_ADDRESS_expected[19] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 18 ]
initial
begin
	DATA_ADDRESS_expected[18] = 1'bX;
	DATA_ADDRESS_expected[18] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 17 ]
initial
begin
	DATA_ADDRESS_expected[17] = 1'bX;
	DATA_ADDRESS_expected[17] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 16 ]
initial
begin
	DATA_ADDRESS_expected[16] = 1'bX;
	DATA_ADDRESS_expected[16] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 15 ]
initial
begin
	DATA_ADDRESS_expected[15] = 1'bX;
	DATA_ADDRESS_expected[15] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 14 ]
initial
begin
	DATA_ADDRESS_expected[14] = 1'bX;
	DATA_ADDRESS_expected[14] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 13 ]
initial
begin
	DATA_ADDRESS_expected[13] = 1'bX;
	DATA_ADDRESS_expected[13] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 12 ]
initial
begin
	DATA_ADDRESS_expected[12] = 1'bX;
	DATA_ADDRESS_expected[12] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 11 ]
initial
begin
	DATA_ADDRESS_expected[11] = 1'bX;
	DATA_ADDRESS_expected[11] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 10 ]
initial
begin
	DATA_ADDRESS_expected[10] = 1'bX;
	DATA_ADDRESS_expected[10] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 9 ]
initial
begin
	DATA_ADDRESS_expected[9] = 1'bX;
	DATA_ADDRESS_expected[9] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 8 ]
initial
begin
	DATA_ADDRESS_expected[8] = 1'bX;
	DATA_ADDRESS_expected[8] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 7 ]
initial
begin
	DATA_ADDRESS_expected[7] = 1'bX;
	DATA_ADDRESS_expected[7] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 6 ]
initial
begin
	DATA_ADDRESS_expected[6] = 1'bX;
	DATA_ADDRESS_expected[6] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 5 ]
initial
begin
	DATA_ADDRESS_expected[5] = 1'bX;
	DATA_ADDRESS_expected[5] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 4 ]
initial
begin
	DATA_ADDRESS_expected[4] = 1'bX;
	DATA_ADDRESS_expected[4] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 3 ]
initial
begin
	DATA_ADDRESS_expected[3] = 1'bX;
	DATA_ADDRESS_expected[3] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 2 ]
initial
begin
	DATA_ADDRESS_expected[2] = 1'bX;
	DATA_ADDRESS_expected[2] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 1 ]
initial
begin
	DATA_ADDRESS_expected[1] = 1'bX;
	DATA_ADDRESS_expected[1] = #999000 1'b0;
end 
// expected DATA_ADDRESS[ 0 ]
initial
begin
	DATA_ADDRESS_expected[0] = 1'bX;
	DATA_ADDRESS_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(DATA_ADDRESS_expected or DATA_ADDRESS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_ADDRESS = %b | ",DATA_ADDRESS_expected_prev);
	$display("| real DATA_ADDRESS = %b | ",DATA_ADDRESS_prev);
`endif
	if (
		( DATA_ADDRESS_expected_prev[0] !== 1'bx ) && ( DATA_ADDRESS_prev[0] !== DATA_ADDRESS_expected_prev[0] )
		&& ((DATA_ADDRESS_expected_prev[0] !== last_DATA_ADDRESS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[0] = DATA_ADDRESS_expected_prev[0];
	end
	if (
		( DATA_ADDRESS_expected_prev[1] !== 1'bx ) && ( DATA_ADDRESS_prev[1] !== DATA_ADDRESS_expected_prev[1] )
		&& ((DATA_ADDRESS_expected_prev[1] !== last_DATA_ADDRESS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[1] = DATA_ADDRESS_expected_prev[1];
	end
	if (
		( DATA_ADDRESS_expected_prev[2] !== 1'bx ) && ( DATA_ADDRESS_prev[2] !== DATA_ADDRESS_expected_prev[2] )
		&& ((DATA_ADDRESS_expected_prev[2] !== last_DATA_ADDRESS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[2] = DATA_ADDRESS_expected_prev[2];
	end
	if (
		( DATA_ADDRESS_expected_prev[3] !== 1'bx ) && ( DATA_ADDRESS_prev[3] !== DATA_ADDRESS_expected_prev[3] )
		&& ((DATA_ADDRESS_expected_prev[3] !== last_DATA_ADDRESS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[3] = DATA_ADDRESS_expected_prev[3];
	end
	if (
		( DATA_ADDRESS_expected_prev[4] !== 1'bx ) && ( DATA_ADDRESS_prev[4] !== DATA_ADDRESS_expected_prev[4] )
		&& ((DATA_ADDRESS_expected_prev[4] !== last_DATA_ADDRESS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[4] = DATA_ADDRESS_expected_prev[4];
	end
	if (
		( DATA_ADDRESS_expected_prev[5] !== 1'bx ) && ( DATA_ADDRESS_prev[5] !== DATA_ADDRESS_expected_prev[5] )
		&& ((DATA_ADDRESS_expected_prev[5] !== last_DATA_ADDRESS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[5] = DATA_ADDRESS_expected_prev[5];
	end
	if (
		( DATA_ADDRESS_expected_prev[6] !== 1'bx ) && ( DATA_ADDRESS_prev[6] !== DATA_ADDRESS_expected_prev[6] )
		&& ((DATA_ADDRESS_expected_prev[6] !== last_DATA_ADDRESS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[6] = DATA_ADDRESS_expected_prev[6];
	end
	if (
		( DATA_ADDRESS_expected_prev[7] !== 1'bx ) && ( DATA_ADDRESS_prev[7] !== DATA_ADDRESS_expected_prev[7] )
		&& ((DATA_ADDRESS_expected_prev[7] !== last_DATA_ADDRESS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[7] = DATA_ADDRESS_expected_prev[7];
	end
	if (
		( DATA_ADDRESS_expected_prev[8] !== 1'bx ) && ( DATA_ADDRESS_prev[8] !== DATA_ADDRESS_expected_prev[8] )
		&& ((DATA_ADDRESS_expected_prev[8] !== last_DATA_ADDRESS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[8] = DATA_ADDRESS_expected_prev[8];
	end
	if (
		( DATA_ADDRESS_expected_prev[9] !== 1'bx ) && ( DATA_ADDRESS_prev[9] !== DATA_ADDRESS_expected_prev[9] )
		&& ((DATA_ADDRESS_expected_prev[9] !== last_DATA_ADDRESS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[9] = DATA_ADDRESS_expected_prev[9];
	end
	if (
		( DATA_ADDRESS_expected_prev[10] !== 1'bx ) && ( DATA_ADDRESS_prev[10] !== DATA_ADDRESS_expected_prev[10] )
		&& ((DATA_ADDRESS_expected_prev[10] !== last_DATA_ADDRESS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[10] = DATA_ADDRESS_expected_prev[10];
	end
	if (
		( DATA_ADDRESS_expected_prev[11] !== 1'bx ) && ( DATA_ADDRESS_prev[11] !== DATA_ADDRESS_expected_prev[11] )
		&& ((DATA_ADDRESS_expected_prev[11] !== last_DATA_ADDRESS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[11] = DATA_ADDRESS_expected_prev[11];
	end
	if (
		( DATA_ADDRESS_expected_prev[12] !== 1'bx ) && ( DATA_ADDRESS_prev[12] !== DATA_ADDRESS_expected_prev[12] )
		&& ((DATA_ADDRESS_expected_prev[12] !== last_DATA_ADDRESS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[12] = DATA_ADDRESS_expected_prev[12];
	end
	if (
		( DATA_ADDRESS_expected_prev[13] !== 1'bx ) && ( DATA_ADDRESS_prev[13] !== DATA_ADDRESS_expected_prev[13] )
		&& ((DATA_ADDRESS_expected_prev[13] !== last_DATA_ADDRESS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[13] = DATA_ADDRESS_expected_prev[13];
	end
	if (
		( DATA_ADDRESS_expected_prev[14] !== 1'bx ) && ( DATA_ADDRESS_prev[14] !== DATA_ADDRESS_expected_prev[14] )
		&& ((DATA_ADDRESS_expected_prev[14] !== last_DATA_ADDRESS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[14] = DATA_ADDRESS_expected_prev[14];
	end
	if (
		( DATA_ADDRESS_expected_prev[15] !== 1'bx ) && ( DATA_ADDRESS_prev[15] !== DATA_ADDRESS_expected_prev[15] )
		&& ((DATA_ADDRESS_expected_prev[15] !== last_DATA_ADDRESS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[15] = DATA_ADDRESS_expected_prev[15];
	end
	if (
		( DATA_ADDRESS_expected_prev[16] !== 1'bx ) && ( DATA_ADDRESS_prev[16] !== DATA_ADDRESS_expected_prev[16] )
		&& ((DATA_ADDRESS_expected_prev[16] !== last_DATA_ADDRESS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[16] = DATA_ADDRESS_expected_prev[16];
	end
	if (
		( DATA_ADDRESS_expected_prev[17] !== 1'bx ) && ( DATA_ADDRESS_prev[17] !== DATA_ADDRESS_expected_prev[17] )
		&& ((DATA_ADDRESS_expected_prev[17] !== last_DATA_ADDRESS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[17] = DATA_ADDRESS_expected_prev[17];
	end
	if (
		( DATA_ADDRESS_expected_prev[18] !== 1'bx ) && ( DATA_ADDRESS_prev[18] !== DATA_ADDRESS_expected_prev[18] )
		&& ((DATA_ADDRESS_expected_prev[18] !== last_DATA_ADDRESS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[18] = DATA_ADDRESS_expected_prev[18];
	end
	if (
		( DATA_ADDRESS_expected_prev[19] !== 1'bx ) && ( DATA_ADDRESS_prev[19] !== DATA_ADDRESS_expected_prev[19] )
		&& ((DATA_ADDRESS_expected_prev[19] !== last_DATA_ADDRESS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[19] = DATA_ADDRESS_expected_prev[19];
	end
	if (
		( DATA_ADDRESS_expected_prev[20] !== 1'bx ) && ( DATA_ADDRESS_prev[20] !== DATA_ADDRESS_expected_prev[20] )
		&& ((DATA_ADDRESS_expected_prev[20] !== last_DATA_ADDRESS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[20] = DATA_ADDRESS_expected_prev[20];
	end
	if (
		( DATA_ADDRESS_expected_prev[21] !== 1'bx ) && ( DATA_ADDRESS_prev[21] !== DATA_ADDRESS_expected_prev[21] )
		&& ((DATA_ADDRESS_expected_prev[21] !== last_DATA_ADDRESS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[21] = DATA_ADDRESS_expected_prev[21];
	end
	if (
		( DATA_ADDRESS_expected_prev[22] !== 1'bx ) && ( DATA_ADDRESS_prev[22] !== DATA_ADDRESS_expected_prev[22] )
		&& ((DATA_ADDRESS_expected_prev[22] !== last_DATA_ADDRESS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[22] = DATA_ADDRESS_expected_prev[22];
	end
	if (
		( DATA_ADDRESS_expected_prev[23] !== 1'bx ) && ( DATA_ADDRESS_prev[23] !== DATA_ADDRESS_expected_prev[23] )
		&& ((DATA_ADDRESS_expected_prev[23] !== last_DATA_ADDRESS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[23] = DATA_ADDRESS_expected_prev[23];
	end
	if (
		( DATA_ADDRESS_expected_prev[24] !== 1'bx ) && ( DATA_ADDRESS_prev[24] !== DATA_ADDRESS_expected_prev[24] )
		&& ((DATA_ADDRESS_expected_prev[24] !== last_DATA_ADDRESS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[24] = DATA_ADDRESS_expected_prev[24];
	end
	if (
		( DATA_ADDRESS_expected_prev[25] !== 1'bx ) && ( DATA_ADDRESS_prev[25] !== DATA_ADDRESS_expected_prev[25] )
		&& ((DATA_ADDRESS_expected_prev[25] !== last_DATA_ADDRESS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[25] = DATA_ADDRESS_expected_prev[25];
	end
	if (
		( DATA_ADDRESS_expected_prev[26] !== 1'bx ) && ( DATA_ADDRESS_prev[26] !== DATA_ADDRESS_expected_prev[26] )
		&& ((DATA_ADDRESS_expected_prev[26] !== last_DATA_ADDRESS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[26] = DATA_ADDRESS_expected_prev[26];
	end
	if (
		( DATA_ADDRESS_expected_prev[27] !== 1'bx ) && ( DATA_ADDRESS_prev[27] !== DATA_ADDRESS_expected_prev[27] )
		&& ((DATA_ADDRESS_expected_prev[27] !== last_DATA_ADDRESS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[27] = DATA_ADDRESS_expected_prev[27];
	end
	if (
		( DATA_ADDRESS_expected_prev[28] !== 1'bx ) && ( DATA_ADDRESS_prev[28] !== DATA_ADDRESS_expected_prev[28] )
		&& ((DATA_ADDRESS_expected_prev[28] !== last_DATA_ADDRESS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[28] = DATA_ADDRESS_expected_prev[28];
	end
	if (
		( DATA_ADDRESS_expected_prev[29] !== 1'bx ) && ( DATA_ADDRESS_prev[29] !== DATA_ADDRESS_expected_prev[29] )
		&& ((DATA_ADDRESS_expected_prev[29] !== last_DATA_ADDRESS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[29] = DATA_ADDRESS_expected_prev[29];
	end
	if (
		( DATA_ADDRESS_expected_prev[30] !== 1'bx ) && ( DATA_ADDRESS_prev[30] !== DATA_ADDRESS_expected_prev[30] )
		&& ((DATA_ADDRESS_expected_prev[30] !== last_DATA_ADDRESS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[30] = DATA_ADDRESS_expected_prev[30];
	end
	if (
		( DATA_ADDRESS_expected_prev[31] !== 1'bx ) && ( DATA_ADDRESS_prev[31] !== DATA_ADDRESS_expected_prev[31] )
		&& ((DATA_ADDRESS_expected_prev[31] !== last_DATA_ADDRESS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_ADDRESS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_ADDRESS_expected_prev);
		$display ("     Real value = %b", DATA_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_ADDRESS_exp[31] = DATA_ADDRESS_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MAR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [31:0] IN_C;
reg LOAD;
reg [35:0] MIR;
// wires                                               
wire [31:0] DATA_ADDRESS;

wire sampler;                             

// assign statements (if any)                          
MAR i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DATA_ADDRESS(DATA_ADDRESS),
	.IN_C(IN_C),
	.LOAD(LOAD),
	.MIR(MIR)
);
// IN_C[ 31 ]
initial
begin
	IN_C[31] = 1'b0;
end 
// IN_C[ 30 ]
initial
begin
	IN_C[30] = 1'b0;
end 
// IN_C[ 29 ]
initial
begin
	IN_C[29] = 1'b0;
end 
// IN_C[ 28 ]
initial
begin
	IN_C[28] = 1'b0;
end 
// IN_C[ 27 ]
initial
begin
	IN_C[27] = 1'b0;
end 
// IN_C[ 26 ]
initial
begin
	IN_C[26] = 1'b0;
end 
// IN_C[ 25 ]
initial
begin
	IN_C[25] = 1'b0;
end 
// IN_C[ 24 ]
initial
begin
	IN_C[24] = 1'b0;
end 
// IN_C[ 23 ]
initial
begin
	IN_C[23] = 1'b0;
end 
// IN_C[ 22 ]
initial
begin
	IN_C[22] = 1'b0;
end 
// IN_C[ 21 ]
initial
begin
	IN_C[21] = 1'b0;
end 
// IN_C[ 20 ]
initial
begin
	IN_C[20] = 1'b0;
end 
// IN_C[ 19 ]
initial
begin
	IN_C[19] = 1'b0;
end 
// IN_C[ 18 ]
initial
begin
	IN_C[18] = 1'b0;
end 
// IN_C[ 17 ]
initial
begin
	IN_C[17] = 1'b0;
end 
// IN_C[ 16 ]
initial
begin
	IN_C[16] = 1'b0;
end 
// IN_C[ 15 ]
initial
begin
	IN_C[15] = 1'b0;
end 
// IN_C[ 14 ]
initial
begin
	IN_C[14] = 1'b0;
end 
// IN_C[ 13 ]
initial
begin
	IN_C[13] = 1'b0;
end 
// IN_C[ 12 ]
initial
begin
	IN_C[12] = 1'b0;
end 
// IN_C[ 11 ]
initial
begin
	IN_C[11] = 1'b0;
end 
// IN_C[ 10 ]
initial
begin
	IN_C[10] = 1'b0;
end 
// IN_C[ 9 ]
initial
begin
	IN_C[9] = 1'b0;
end 
// IN_C[ 8 ]
initial
begin
	IN_C[8] = 1'b0;
end 
// IN_C[ 7 ]
initial
begin
	IN_C[7] = 1'b0;
end 
// IN_C[ 6 ]
initial
begin
	IN_C[6] = 1'b0;
end 
// IN_C[ 5 ]
initial
begin
	IN_C[5] = 1'b0;
end 
// IN_C[ 4 ]
initial
begin
	IN_C[4] = 1'b0;
end 
// IN_C[ 3 ]
always
begin
	IN_C[3] = 1'b0;
	IN_C[3] = #800000 1'b1;
	#800000;
end 
// IN_C[ 2 ]
always
begin
	IN_C[2] = 1'b0;
	IN_C[2] = #400000 1'b1;
	#400000;
end 
// IN_C[ 1 ]
always
begin
	IN_C[1] = 1'b0;
	IN_C[1] = #200000 1'b1;
	#200000;
end 
// IN_C[ 0 ]
always
begin
	IN_C[0] = 1'b0;
	IN_C[0] = #100000 1'b1;
	#100000;
end 

// LOAD
always
begin
	LOAD = 1'b0;
	LOAD = #400000 1'b1;
	#400000;
end 

// MIR[7]
initial
begin
	MIR[7] = 1'b1;
	MIR[7] = #600000 1'b0;
	MIR[7] = #600000 1'b1;
end 

// MIR[35]
initial
begin
	MIR[35] = 1'b0;
end 

// MIR[34]
initial
begin
	MIR[34] = 1'b0;
end 

// MIR[33]
initial
begin
	MIR[33] = 1'b0;
end 

// MIR[32]
initial
begin
	MIR[32] = 1'b0;
end 

// MIR[31]
initial
begin
	MIR[31] = 1'b0;
end 

// MIR[30]
initial
begin
	MIR[30] = 1'b0;
end 

// MIR[29]
initial
begin
	MIR[29] = 1'b0;
end 

// MIR[28]
initial
begin
	MIR[28] = 1'b0;
end 

// MIR[27]
initial
begin
	MIR[27] = 1'b0;
end 

// MIR[26]
initial
begin
	MIR[26] = 1'b0;
end 

// MIR[25]
initial
begin
	MIR[25] = 1'b0;
end 

// MIR[24]
initial
begin
	MIR[24] = 1'b0;
end 

// MIR[23]
initial
begin
	MIR[23] = 1'b0;
end 

// MIR[22]
initial
begin
	MIR[22] = 1'b0;
end 

// MIR[21]
initial
begin
	MIR[21] = 1'b0;
end 

// MIR[20]
initial
begin
	MIR[20] = 1'b0;
end 

// MIR[19]
initial
begin
	MIR[19] = 1'b0;
end 

// MIR[18]
initial
begin
	MIR[18] = 1'b0;
end 

// MIR[17]
initial
begin
	MIR[17] = 1'b0;
end 

// MIR[16]
initial
begin
	MIR[16] = 1'b0;
end 

// MIR[15]
initial
begin
	MIR[15] = 1'b0;
end 

// MIR[14]
initial
begin
	MIR[14] = 1'b0;
end 

// MIR[13]
initial
begin
	MIR[13] = 1'b0;
end 

// MIR[12]
initial
begin
	MIR[12] = 1'b0;
end 

// MIR[11]
initial
begin
	MIR[11] = 1'b0;
end 

// MIR[10]
initial
begin
	MIR[10] = 1'b0;
end 

// MIR[9]
initial
begin
	MIR[9] = 1'b0;
end 

// MIR[8]
initial
begin
	MIR[8] = 1'b0;
end 

// MIR[6]
initial
begin
	MIR[6] = 1'b0;
end 

// MIR[5]
initial
begin
	MIR[5] = 1'b0;
end 

// MIR[4]
initial
begin
	MIR[4] = 1'b0;
end 

// MIR[3]
initial
begin
	MIR[3] = 1'b0;
end 

// MIR[2]
initial
begin
	MIR[2] = 1'b0;
end 

// MIR[1]
initial
begin
	MIR[1] = 1'b0;
end 

// MIR[0]
initial
begin
	MIR[0] = 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #50000 1'b1;
	#50000;
end 

MAR_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.IN_C(IN_C),
	.LOAD(LOAD),
	.MIR(MIR),
	.sampler_tx(sampler)
);

MAR_vlg_check_tst tb_out(
	.DATA_ADDRESS(DATA_ADDRESS),
	.sampler_rx(sampler)
);
endmodule

