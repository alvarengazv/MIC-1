// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/20/2024 15:37:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIC1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIC1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg LOADN;
// wires                                               
wire [31:0] C_BUS;
wire [31:0] DATA_MEM_ADDR;
wire [31:0] DATA_MEM_OUT;
wire DATA_MEM_write_enable;
wire [7:0] MBR_OUT;
wire [35:0] MIR;
wire [8:0] MPC;
wire [31:0] PC;

// assign statements (if any)                          
MIC1 i1 (
// port map - connection between master ports and signals/registers   
	.C_BUS(C_BUS),
	.CLOCK(CLOCK),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.LOADN(LOADN),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC)
);
initial 
begin 
#1600000 $finish;
end 
initial 
begin 
#1600000 $finish;
end 
endmodule

