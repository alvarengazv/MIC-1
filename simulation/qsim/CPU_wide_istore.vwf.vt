// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2024 15:33:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	CLOCK,
	LOAD,
	MBR_IN,
	MDR_IN,
	sampler_tx
);
input  CLOCK;
input  LOAD;
input [7:0] MBR_IN;
input [31:0] MDR_IN;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or LOAD or MBR_IN or MDR_IN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	A_BUS,
	B_BUS,
	C_BUS,
	MAR,
	MDR_OUT,
	MIR,
	MPC,
	PC,
	sampler_rx
);
input [31:0] A_BUS;
input [31:0] B_BUS;
input [31:0] C_BUS;
input [31:0] MAR;
input [31:0] MDR_OUT;
input [35:0] MIR;
input [8:0] MPC;
input [31:0] PC;
input sampler_rx;

reg [31:0] A_BUS_expected;
reg [31:0] B_BUS_expected;
reg [31:0] C_BUS_expected;
reg [31:0] MAR_expected;
reg [31:0] MDR_OUT_expected;
reg [35:0] MIR_expected;
reg [8:0] MPC_expected;
reg [31:0] PC_expected;

reg [31:0] A_BUS_prev;
reg [31:0] B_BUS_prev;
reg [31:0] C_BUS_prev;
reg [31:0] MAR_prev;
reg [31:0] MDR_OUT_prev;
reg [35:0] MIR_prev;
reg [8:0] MPC_prev;
reg [31:0] PC_prev;

reg [35:0] MIR_expected_prev;
reg [8:0] MPC_expected_prev;
reg [31:0] PC_expected_prev;

reg [35:0] last_MIR_exp;
reg [8:0] last_MPC_exp;
reg [31:0] last_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_BUS_prev = A_BUS;
	B_BUS_prev = B_BUS;
	C_BUS_prev = C_BUS;
	MAR_prev = MAR;
	MDR_OUT_prev = MDR_OUT;
	MIR_prev = MIR;
	MPC_prev = MPC;
	PC_prev = PC;
end

// update expected /o prevs

always @(trigger)
begin
	MIR_expected_prev = MIR_expected;
	MPC_expected_prev = MPC_expected;
	PC_expected_prev = PC_expected;
end


// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'b0;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'b0;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'b0;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'b0;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'b0;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'b0;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'b0;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'b0;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'b0;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'b0;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'b0;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'b0;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'b0;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'b0;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'b0;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'b0;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'b0;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'b0;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'b0;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'b0;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'b0;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'b0;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'b0;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'b0;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'b0;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'b0;
	PC_expected[2] = #690018 1'b1;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'b0;
	PC_expected[1] = #390410 1'b1;
	PC_expected[1] = #300000 1'b0;
	PC_expected[1] = #800000 1'b1;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'b0;
	PC_expected[0] = #190544 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #600000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
end 
// expected MIR[ 35 ]
initial
begin
	MIR_expected[35] = 1'b0;
	MIR_expected[35] = #509584 1'b1;
	MIR_expected[35] = #400000 1'b0;
end 
// expected MIR[ 34 ]
initial
begin
	MIR_expected[34] = 1'b0;
	MIR_expected[34] = #409417 1'b1;
	MIR_expected[34] = #100000 1'b0;
end 
// expected MIR[ 33 ]
initial
begin
	MIR_expected[33] = 1'b0;
	MIR_expected[33] = #409916 1'b1;
	MIR_expected[33] = #100000 1'b0;
end 
// expected MIR[ 32 ]
initial
begin
	MIR_expected[32] = 1'b0;
	MIR_expected[32] = #609619 1'b1;
	MIR_expected[32] = #700000 1'b0;
end 
// expected MIR[ 31 ]
initial
begin
	MIR_expected[31] = 1'b0;
	MIR_expected[31] = #609477 1'b1;
	MIR_expected[31] = #700000 1'b0;
end 
// expected MIR[ 30 ]
initial
begin
	MIR_expected[30] = 1'b0;
	MIR_expected[30] = #709815 1'b1;
	MIR_expected[30] = #600000 1'b0;
end 
// expected MIR[ 29 ]
initial
begin
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #409455 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #100000 1'b1;
	MIR_expected[29] = #100000 1'b0;
end 
// expected MIR[ 28 ]
initial
begin
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #109850 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #300000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #400000 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
end 
// expected MIR[ 27 ]
initial
begin
	MIR_expected[27] = 1'b0;
	# 409424;
	repeat(4)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
end 
// expected MIR[ 26 ]
initial
begin
	MIR_expected[26] = 1'b0;
	# 110015;
	repeat(2)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[26] = 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #800000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #100000 1'b1;
	MIR_expected[26] = #100000 1'b0;
end 
// expected MIR[ 25 ]
initial
begin
	MIR_expected[25] = 1'b0;
end 
// expected MIR[ 24 ]
initial
begin
	MIR_expected[24] = 1'b0;
end 
// expected MIR[ 23 ]
initial
begin
	MIR_expected[23] = 1'b0;
	MIR_expected[23] = #709741 1'b1;
	MIR_expected[23] = #100000 1'b0;
end 
// expected MIR[ 22 ]
initial
begin
	MIR_expected[22] = 1'b0;
end 
// expected MIR[ 21 ]
initial
begin
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #109786 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
end 
// expected MIR[ 20 ]
initial
begin
	MIR_expected[20] = 1'b0;
	MIR_expected[20] = #110142 1'b1;
	MIR_expected[20] = #100000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #200000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #900000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #100000 1'b0;
end 
// expected MIR[ 19 ]
initial
begin
	MIR_expected[19] = 1'b0;
	MIR_expected[19] = #810094 1'b1;
	MIR_expected[19] = #200000 1'b0;
end 
// expected MIR[ 18 ]
initial
begin
	MIR_expected[18] = 1'b0;
	MIR_expected[18] = #109995 1'b1;
	MIR_expected[18] = #100000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #200000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #900000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #100000 1'b0;
end 
// expected MIR[ 17 ]
initial
begin
	MIR_expected[17] = 1'b0;
	MIR_expected[17] = #1109691 1'b1;
	MIR_expected[17] = #100000 1'b0;
end 
// expected MIR[ 16 ]
initial
begin
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #109751 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b1;
		MIR_expected[16] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[16] = 1'b1;
	MIR_expected[16] = #100000 1'b0;
end 
// expected MIR[ 15 ]
initial
begin
	MIR_expected[15] = 1'b0;
	MIR_expected[15] = #710093 1'b1;
	MIR_expected[15] = #200000 1'b0;
end 
// expected MIR[ 14 ]
initial
begin
	MIR_expected[14] = 1'b0;
end 
// expected MIR[ 13 ]
initial
begin
	MIR_expected[13] = 1'b0;
	MIR_expected[13] = #1310086 1'b1;
	MIR_expected[13] = #100000 1'b0;
end 
// expected MIR[ 12 ]
initial
begin
	MIR_expected[12] = 1'b0;
end 
// expected MIR[ 11 ]
initial
begin
	MIR_expected[11] = 1'b0;
end 
// expected MIR[ 10 ]
initial
begin
	MIR_expected[10] = 1'b0;
	MIR_expected[10] = #1110105 1'b1;
	MIR_expected[10] = #100000 1'b0;
end 
// expected MIR[ 9 ]
initial
begin
	MIR_expected[9] = 1'b0;
	MIR_expected[9] = #110319 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
end 
// expected MIR[ 8 ]
initial
begin
	MIR_expected[8] = 1'b0;
	MIR_expected[8] = #1010078 1'b1;
	MIR_expected[8] = #100000 1'b0;
end 
// expected MIR[ 7 ]
initial
begin
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #909819 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
end 
// expected MIR[ 6 ]
initial
begin
	MIR_expected[6] = 1'b0;
	MIR_expected[6] = #1010311 1'b1;
	MIR_expected[6] = #100000 1'b0;
end 
// expected MIR[ 5 ]
initial
begin
	MIR_expected[5] = 1'b0;
	MIR_expected[5] = #1110649 1'b1;
	MIR_expected[5] = #100000 1'b0;
end 
// expected MIR[ 4 ]
initial
begin
	MIR_expected[4] = 1'b0;
	MIR_expected[4] = #111002 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
end 
// expected MIR[ 3 ]
initial
begin
	MIR_expected[3] = 1'b0;
end 
// expected MIR[ 2 ]
initial
begin
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #909703 1'b1;
	MIR_expected[2] = #300000 1'b0;
end 
// expected MIR[ 1 ]
initial
begin
	MIR_expected[1] = 1'b0;
	MIR_expected[1] = #709440 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #100000 1'b1;
	MIR_expected[1] = #100000 1'b0;
end 
// expected MIR[ 0 ]
initial
begin
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #109436 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 500000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
end 
// expected MPC[ 8 ]
initial
begin
	MPC_expected[8] = 1'b0;
	MPC_expected[8] = #511441 1'b1;
	MPC_expected[8] = #400000 1'b0;
end 
// expected MPC[ 7 ]
initial
begin
	MPC_expected[7] = 1'b0;
	MPC_expected[7] = #387832 1'b1;
	MPC_expected[7] = #123363 1'b0;
	MPC_expected[7] = #635 1'b1;
	MPC_expected[7] = #76002 1'b0;
	MPC_expected[7] = #823998 1'b1;
	MPC_expected[7] = #76002 1'b0;
end 
// expected MPC[ 6 ]
initial
begin
	MPC_expected[6] = 1'b0;
	MPC_expected[6] = #387625 1'b1;
	MPC_expected[6] = #123614 1'b0;
	MPC_expected[6] = #386 1'b1;
	MPC_expected[6] = #76000 1'b0;
end 
// expected MPC[ 5 ]
initial
begin
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #588752 1'b1;
	MPC_expected[5] = #723323 1'b0;
	MPC_expected[5] = #100668 1'b1;
	MPC_expected[5] = #76009 1'b0;
end 
// expected MPC[ 4 ]
initial
begin
	MPC_expected[4] = 1'b0;
	MPC_expected[4] = #588311 1'b1;
	MPC_expected[4] = #723409 1'b0;
end 
// expected MPC[ 3 ]
initial
begin
	MPC_expected[3] = 1'b0;
	MPC_expected[3] = #711302 1'b1;
	MPC_expected[3] = #600000 1'b0;
end 
// expected MPC[ 2 ]
initial
begin
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #388068 1'b1;
	MPC_expected[2] = #123321 1'b0;
	MPC_expected[2] = #675 1'b1;
	MPC_expected[2] = #199325 1'b0;
	MPC_expected[2] = #700675 1'b1;
	MPC_expected[2] = #76004 1'b0;
end 
// expected MPC[ 1 ]
initial
begin
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #110460 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #276948 1'b1;
	MPC_expected[1] = #123052 1'b0;
	MPC_expected[1] = #400000 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
end 
// expected MPC[ 0 ]
initial
begin
	MPC_expected[0] = 1'b0;
	# 411551;
	repeat(4)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #101209 1'b1;
	MPC_expected[0] = #75691 1'b0;
end 
// generate trigger
always @(A_BUS_expected or A_BUS or B_BUS_expected or B_BUS or C_BUS_expected or C_BUS or MAR_expected or MAR or MDR_OUT_expected or MDR_OUT or MIR_expected or MIR or MPC_expected or MPC or PC_expected or PC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_BUS = %b | expected B_BUS = %b | expected C_BUS = %b | expected MAR = %b | expected MDR_OUT = %b | expected MIR = %b | expected MPC = %b | expected PC = %b | ",A_BUS_expected_prev,B_BUS_expected_prev,C_BUS_expected_prev,MAR_expected_prev,MDR_OUT_expected_prev,MIR_expected_prev,MPC_expected_prev,PC_expected_prev);
	$display("| real A_BUS = %b | real B_BUS = %b | real C_BUS = %b | real MAR = %b | real MDR_OUT = %b | real MIR = %b | real MPC = %b | real PC = %b | ",A_BUS_prev,B_BUS_prev,C_BUS_prev,MAR_prev,MDR_OUT_prev,MIR_prev,MPC_prev,PC_prev);
`endif
	if (
		( MIR_expected_prev[0] !== 1'bx ) && ( MIR_prev[0] !== MIR_expected_prev[0] )
		&& ((MIR_expected_prev[0] !== last_MIR_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[0] = MIR_expected_prev[0];
	end
	if (
		( MIR_expected_prev[1] !== 1'bx ) && ( MIR_prev[1] !== MIR_expected_prev[1] )
		&& ((MIR_expected_prev[1] !== last_MIR_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[1] = MIR_expected_prev[1];
	end
	if (
		( MIR_expected_prev[2] !== 1'bx ) && ( MIR_prev[2] !== MIR_expected_prev[2] )
		&& ((MIR_expected_prev[2] !== last_MIR_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[2] = MIR_expected_prev[2];
	end
	if (
		( MIR_expected_prev[3] !== 1'bx ) && ( MIR_prev[3] !== MIR_expected_prev[3] )
		&& ((MIR_expected_prev[3] !== last_MIR_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[3] = MIR_expected_prev[3];
	end
	if (
		( MIR_expected_prev[4] !== 1'bx ) && ( MIR_prev[4] !== MIR_expected_prev[4] )
		&& ((MIR_expected_prev[4] !== last_MIR_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[4] = MIR_expected_prev[4];
	end
	if (
		( MIR_expected_prev[5] !== 1'bx ) && ( MIR_prev[5] !== MIR_expected_prev[5] )
		&& ((MIR_expected_prev[5] !== last_MIR_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[5] = MIR_expected_prev[5];
	end
	if (
		( MIR_expected_prev[6] !== 1'bx ) && ( MIR_prev[6] !== MIR_expected_prev[6] )
		&& ((MIR_expected_prev[6] !== last_MIR_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[6] = MIR_expected_prev[6];
	end
	if (
		( MIR_expected_prev[7] !== 1'bx ) && ( MIR_prev[7] !== MIR_expected_prev[7] )
		&& ((MIR_expected_prev[7] !== last_MIR_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[7] = MIR_expected_prev[7];
	end
	if (
		( MIR_expected_prev[8] !== 1'bx ) && ( MIR_prev[8] !== MIR_expected_prev[8] )
		&& ((MIR_expected_prev[8] !== last_MIR_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[8] = MIR_expected_prev[8];
	end
	if (
		( MIR_expected_prev[9] !== 1'bx ) && ( MIR_prev[9] !== MIR_expected_prev[9] )
		&& ((MIR_expected_prev[9] !== last_MIR_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[9] = MIR_expected_prev[9];
	end
	if (
		( MIR_expected_prev[10] !== 1'bx ) && ( MIR_prev[10] !== MIR_expected_prev[10] )
		&& ((MIR_expected_prev[10] !== last_MIR_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[10] = MIR_expected_prev[10];
	end
	if (
		( MIR_expected_prev[11] !== 1'bx ) && ( MIR_prev[11] !== MIR_expected_prev[11] )
		&& ((MIR_expected_prev[11] !== last_MIR_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[11] = MIR_expected_prev[11];
	end
	if (
		( MIR_expected_prev[12] !== 1'bx ) && ( MIR_prev[12] !== MIR_expected_prev[12] )
		&& ((MIR_expected_prev[12] !== last_MIR_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[12] = MIR_expected_prev[12];
	end
	if (
		( MIR_expected_prev[13] !== 1'bx ) && ( MIR_prev[13] !== MIR_expected_prev[13] )
		&& ((MIR_expected_prev[13] !== last_MIR_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[13] = MIR_expected_prev[13];
	end
	if (
		( MIR_expected_prev[14] !== 1'bx ) && ( MIR_prev[14] !== MIR_expected_prev[14] )
		&& ((MIR_expected_prev[14] !== last_MIR_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[14] = MIR_expected_prev[14];
	end
	if (
		( MIR_expected_prev[15] !== 1'bx ) && ( MIR_prev[15] !== MIR_expected_prev[15] )
		&& ((MIR_expected_prev[15] !== last_MIR_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[15] = MIR_expected_prev[15];
	end
	if (
		( MIR_expected_prev[16] !== 1'bx ) && ( MIR_prev[16] !== MIR_expected_prev[16] )
		&& ((MIR_expected_prev[16] !== last_MIR_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[16] = MIR_expected_prev[16];
	end
	if (
		( MIR_expected_prev[17] !== 1'bx ) && ( MIR_prev[17] !== MIR_expected_prev[17] )
		&& ((MIR_expected_prev[17] !== last_MIR_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[17] = MIR_expected_prev[17];
	end
	if (
		( MIR_expected_prev[18] !== 1'bx ) && ( MIR_prev[18] !== MIR_expected_prev[18] )
		&& ((MIR_expected_prev[18] !== last_MIR_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[18] = MIR_expected_prev[18];
	end
	if (
		( MIR_expected_prev[19] !== 1'bx ) && ( MIR_prev[19] !== MIR_expected_prev[19] )
		&& ((MIR_expected_prev[19] !== last_MIR_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[19] = MIR_expected_prev[19];
	end
	if (
		( MIR_expected_prev[20] !== 1'bx ) && ( MIR_prev[20] !== MIR_expected_prev[20] )
		&& ((MIR_expected_prev[20] !== last_MIR_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[20] = MIR_expected_prev[20];
	end
	if (
		( MIR_expected_prev[21] !== 1'bx ) && ( MIR_prev[21] !== MIR_expected_prev[21] )
		&& ((MIR_expected_prev[21] !== last_MIR_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[21] = MIR_expected_prev[21];
	end
	if (
		( MIR_expected_prev[22] !== 1'bx ) && ( MIR_prev[22] !== MIR_expected_prev[22] )
		&& ((MIR_expected_prev[22] !== last_MIR_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[22] = MIR_expected_prev[22];
	end
	if (
		( MIR_expected_prev[23] !== 1'bx ) && ( MIR_prev[23] !== MIR_expected_prev[23] )
		&& ((MIR_expected_prev[23] !== last_MIR_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[23] = MIR_expected_prev[23];
	end
	if (
		( MIR_expected_prev[24] !== 1'bx ) && ( MIR_prev[24] !== MIR_expected_prev[24] )
		&& ((MIR_expected_prev[24] !== last_MIR_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[24] = MIR_expected_prev[24];
	end
	if (
		( MIR_expected_prev[25] !== 1'bx ) && ( MIR_prev[25] !== MIR_expected_prev[25] )
		&& ((MIR_expected_prev[25] !== last_MIR_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[25] = MIR_expected_prev[25];
	end
	if (
		( MIR_expected_prev[26] !== 1'bx ) && ( MIR_prev[26] !== MIR_expected_prev[26] )
		&& ((MIR_expected_prev[26] !== last_MIR_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[26] = MIR_expected_prev[26];
	end
	if (
		( MIR_expected_prev[27] !== 1'bx ) && ( MIR_prev[27] !== MIR_expected_prev[27] )
		&& ((MIR_expected_prev[27] !== last_MIR_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[27] = MIR_expected_prev[27];
	end
	if (
		( MIR_expected_prev[28] !== 1'bx ) && ( MIR_prev[28] !== MIR_expected_prev[28] )
		&& ((MIR_expected_prev[28] !== last_MIR_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[28] = MIR_expected_prev[28];
	end
	if (
		( MIR_expected_prev[29] !== 1'bx ) && ( MIR_prev[29] !== MIR_expected_prev[29] )
		&& ((MIR_expected_prev[29] !== last_MIR_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[29] = MIR_expected_prev[29];
	end
	if (
		( MIR_expected_prev[30] !== 1'bx ) && ( MIR_prev[30] !== MIR_expected_prev[30] )
		&& ((MIR_expected_prev[30] !== last_MIR_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[30] = MIR_expected_prev[30];
	end
	if (
		( MIR_expected_prev[31] !== 1'bx ) && ( MIR_prev[31] !== MIR_expected_prev[31] )
		&& ((MIR_expected_prev[31] !== last_MIR_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[31] = MIR_expected_prev[31];
	end
	if (
		( MIR_expected_prev[32] !== 1'bx ) && ( MIR_prev[32] !== MIR_expected_prev[32] )
		&& ((MIR_expected_prev[32] !== last_MIR_exp[32]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[32] = MIR_expected_prev[32];
	end
	if (
		( MIR_expected_prev[33] !== 1'bx ) && ( MIR_prev[33] !== MIR_expected_prev[33] )
		&& ((MIR_expected_prev[33] !== last_MIR_exp[33]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[33] = MIR_expected_prev[33];
	end
	if (
		( MIR_expected_prev[34] !== 1'bx ) && ( MIR_prev[34] !== MIR_expected_prev[34] )
		&& ((MIR_expected_prev[34] !== last_MIR_exp[34]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[34] = MIR_expected_prev[34];
	end
	if (
		( MIR_expected_prev[35] !== 1'bx ) && ( MIR_prev[35] !== MIR_expected_prev[35] )
		&& ((MIR_expected_prev[35] !== last_MIR_exp[35]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MIR_exp[35] = MIR_expected_prev[35];
	end
	if (
		( MPC_expected_prev[0] !== 1'bx ) && ( MPC_prev[0] !== MPC_expected_prev[0] )
		&& ((MPC_expected_prev[0] !== last_MPC_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[0] = MPC_expected_prev[0];
	end
	if (
		( MPC_expected_prev[1] !== 1'bx ) && ( MPC_prev[1] !== MPC_expected_prev[1] )
		&& ((MPC_expected_prev[1] !== last_MPC_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[1] = MPC_expected_prev[1];
	end
	if (
		( MPC_expected_prev[2] !== 1'bx ) && ( MPC_prev[2] !== MPC_expected_prev[2] )
		&& ((MPC_expected_prev[2] !== last_MPC_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[2] = MPC_expected_prev[2];
	end
	if (
		( MPC_expected_prev[3] !== 1'bx ) && ( MPC_prev[3] !== MPC_expected_prev[3] )
		&& ((MPC_expected_prev[3] !== last_MPC_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[3] = MPC_expected_prev[3];
	end
	if (
		( MPC_expected_prev[4] !== 1'bx ) && ( MPC_prev[4] !== MPC_expected_prev[4] )
		&& ((MPC_expected_prev[4] !== last_MPC_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[4] = MPC_expected_prev[4];
	end
	if (
		( MPC_expected_prev[5] !== 1'bx ) && ( MPC_prev[5] !== MPC_expected_prev[5] )
		&& ((MPC_expected_prev[5] !== last_MPC_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[5] = MPC_expected_prev[5];
	end
	if (
		( MPC_expected_prev[6] !== 1'bx ) && ( MPC_prev[6] !== MPC_expected_prev[6] )
		&& ((MPC_expected_prev[6] !== last_MPC_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[6] = MPC_expected_prev[6];
	end
	if (
		( MPC_expected_prev[7] !== 1'bx ) && ( MPC_prev[7] !== MPC_expected_prev[7] )
		&& ((MPC_expected_prev[7] !== last_MPC_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[7] = MPC_expected_prev[7];
	end
	if (
		( MPC_expected_prev[8] !== 1'bx ) && ( MPC_prev[8] !== MPC_expected_prev[8] )
		&& ((MPC_expected_prev[8] !== last_MPC_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MPC_exp[8] = MPC_expected_prev[8];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg LOAD;
reg [7:0] MBR_IN;
reg [31:0] MDR_IN;
// wires                                               
wire [31:0] A_BUS;
wire [31:0] B_BUS;
wire [31:0] C_BUS;
wire [31:0] MAR;
wire [31:0] MDR_OUT;
wire [35:0] MIR;
wire [8:0] MPC;
wire [31:0] PC;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.A_BUS(A_BUS),
	.B_BUS(B_BUS),
	.C_BUS(C_BUS),
	.CLOCK(CLOCK),
	.LOAD(LOAD),
	.MAR(MAR),
	.MBR_IN(MBR_IN),
	.MDR_IN(MDR_IN),
	.MDR_OUT(MDR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #80000 1'b1;
	#20000;
end 

CPU_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.LOAD(LOAD),
	.MBR_IN(MBR_IN),
	.MDR_IN(MDR_IN),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.A_BUS(A_BUS),
	.B_BUS(B_BUS),
	.C_BUS(C_BUS),
	.MAR(MAR),
	.MDR_OUT(MDR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC),
	.sampler_rx(sampler)
);
endmodule

